//
// FavoritesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FavoritesAPI {
    /**
     Create a favorite
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteBodyCreate: (body) An object identifying the entity to be favorited.   The object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;.  The content of that object is the &#x60;guid&#x60; of the target entity.  For example, to favorite a file the following body would be used:  &#x60;&#x60;&#x60;JSON {    \&quot;target\&quot;: {       \&quot;file\&quot;: {          \&quot;guid\&quot;: \&quot;abcde-01234-....\&quot;       }    } } &#x60;&#x60;&#x60;  
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFavorite(personId: String, favoriteBodyCreate: FavoriteBodyCreate, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: FavoriteEntry?,_ error: Error?) -> Void)) {
        createFavoriteWithRequestBuilder(personId: personId, favoriteBodyCreate: favoriteBodyCreate, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a favorite
     - POST /alfresco/versions/1/people/{personId}/favorites
     - Favorite a **site**, **file**, or **folder** in the repository.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  **Note:** You can favorite more than one entity by  specifying a list of objects in the JSON body like this:  ```JSON [   {        \"target\": {           \"file\": {              \"guid\": \"abcde-01234-....\"           }        }    },    {        \"target\": {           \"file\": {              \"guid\": \"abcde-09863-....\"           }        }    }, ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "targetGuid" : "targetGuid",
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "properties" : "{}",
    "target" : {
      "site" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      },
      "file" : {
        "isLink" : true,
        "isFile" : true,
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "nodeType" : "nodeType",
        "parentId" : "parentId",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "isFolder" : true,
        "permissions" : {
          "isInheritanceEnabled" : true,
          "settable" : [ "settable", "settable" ],
          "locallySet" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ],
          "inherited" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ]
        },
        "isLocked" : false,
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "properties" : "{}",
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "isFavorite" : true
      },
      "folder" : {
        "isLink" : true,
        "isFile" : true,
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "nodeType" : "nodeType",
        "parentId" : "parentId",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "isFolder" : true,
        "permissions" : {
          "isInheritanceEnabled" : true,
          "settable" : [ "settable", "settable" ],
          "locallySet" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ],
          "inherited" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ]
        },
        "isLocked" : false,
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "properties" : "{}",
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "isFavorite" : true
      }
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteBodyCreate: (body) An object identifying the entity to be favorited.   The object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;.  The content of that object is the &#x60;guid&#x60; of the target entity.  For example, to favorite a file the following body would be used:  &#x60;&#x60;&#x60;JSON {    \&quot;target\&quot;: {       \&quot;file\&quot;: {          \&quot;guid\&quot;: \&quot;abcde-01234-....\&quot;       }    } } &#x60;&#x60;&#x60;  
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<FavoriteEntry> 
     */
    open class func createFavoriteWithRequestBuilder(personId: String, favoriteBodyCreate: FavoriteBodyCreate, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<FavoriteEntry> {
        var path = "/alfresco/versions/1/people/{personId}/favorites"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: favoriteBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<FavoriteEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a site favorite
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteSiteBodyCreate: (body) The id of the site to favorite. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSiteFavorite(personId: String, favoriteSiteBodyCreate: FavoriteSiteBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: FavoriteSiteEntry?,_ error: Error?) -> Void)) {
        createSiteFavoriteWithRequestBuilder(personId: personId, favoriteSiteBodyCreate: favoriteSiteBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a site favorite
     - POST /alfresco/versions/1/people/{personId}/favorite-sites
     - **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future. Use `/people/{personId}/favorites` instead.  Create a site favorite for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   **Note:** You can favorite more than one site by  specifying a list of sites in the JSON body like this:  ```JSON [   {     \"id\": \"test-site-1\"   },   {     \"id\": \"test-site-2\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteSiteBodyCreate: (body) The id of the site to favorite. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<FavoriteSiteEntry> 
     */
    open class func createSiteFavoriteWithRequestBuilder(personId: String, favoriteSiteBodyCreate: FavoriteSiteBodyCreate, fields: [String]? = nil) -> RequestBuilder<FavoriteSiteEntry> {
        var path = "/alfresco/versions/1/people/{personId}/favorite-sites"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: favoriteSiteBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<FavoriteSiteEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a favorite
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteId: (path) The identifier of a favorite. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFavorite(personId: String, favoriteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteFavoriteWithRequestBuilder(personId: personId, favoriteId: favoriteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a favorite
     - DELETE /alfresco/versions/1/people/{personId}/favorites/{favoriteId}
     - Deletes **favoriteId** as a favorite of person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteId: (path) The identifier of a favorite. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteFavoriteWithRequestBuilder(personId: String, favoriteId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/favorites/{favoriteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let favoriteIdPreEscape = "\(favoriteId)"
        let favoriteIdPostEscape = favoriteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{favoriteId}", with: favoriteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a site favorite
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteFavorite(personId: String, siteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSiteFavoriteWithRequestBuilder(personId: personId, siteId: siteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a site favorite
     - DELETE /alfresco/versions/1/people/{personId}/favorite-sites/{siteId}
     - **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future. Use `/people/{personId}/favorites/{favoriteId}` instead.  Deletes site **siteId** from the favorite site list of person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSiteFavoriteWithRequestBuilder(personId: String, siteId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/favorite-sites/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a favorite
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteId: (path) The identifier of a favorite. 
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavorite(personId: String, favoriteId: String, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: FavoriteEntry?,_ error: Error?) -> Void)) {
        getFavoriteWithRequestBuilder(personId: personId, favoriteId: favoriteId, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a favorite
     - GET /alfresco/versions/1/people/{personId}/favorites/{favoriteId}
     - Gets favorite **favoriteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "targetGuid" : "targetGuid",
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "properties" : "{}",
    "target" : {
      "site" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      },
      "file" : {
        "isLink" : true,
        "isFile" : true,
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "nodeType" : "nodeType",
        "parentId" : "parentId",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "isFolder" : true,
        "permissions" : {
          "isInheritanceEnabled" : true,
          "settable" : [ "settable", "settable" ],
          "locallySet" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ],
          "inherited" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ]
        },
        "isLocked" : false,
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "properties" : "{}",
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "isFavorite" : true
      },
      "folder" : {
        "isLink" : true,
        "isFile" : true,
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "nodeType" : "nodeType",
        "parentId" : "parentId",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "isFolder" : true,
        "permissions" : {
          "isInheritanceEnabled" : true,
          "settable" : [ "settable", "settable" ],
          "locallySet" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ],
          "inherited" : [ {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          }, {
            "authorityId" : "authorityId",
            "name" : "name",
            "accessStatus" : "ALLOWED"
          } ]
        },
        "isLocked" : false,
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "properties" : "{}",
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "isFavorite" : true
      }
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter favoriteId: (path) The identifier of a favorite. 
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<FavoriteEntry> 
     */
    open class func getFavoriteWithRequestBuilder(personId: String, favoriteId: String, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<FavoriteEntry> {
        var path = "/alfresco/versions/1/people/{personId}/favorites/{favoriteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let favoriteIdPreEscape = "\(favoriteId)"
        let favoriteIdPostEscape = favoriteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{favoriteId}", with: favoriteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<FavoriteEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a favorite site
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFavoriteSite(personId: String, siteId: String, fields: [String]? = nil, completion: @escaping ((_ data: SiteEntry?,_ error: Error?) -> Void)) {
        getFavoriteSiteWithRequestBuilder(personId: personId, siteId: siteId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a favorite site
     - GET /alfresco/versions/1/people/{personId}/favorite-sites/{siteId}
     - **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future. Use `/people/{personId}/favorites/{favoriteId}` instead.  Gets information on favorite site **siteId** of person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "visibility" : "PRIVATE",
    "guid" : "guid",
    "description" : "description",
    "id" : "id",
    "preset" : "preset",
    "title" : "title"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteEntry> 
     */
    open class func getFavoriteSiteWithRequestBuilder(personId: String, siteId: String, fields: [String]? = nil) -> RequestBuilder<SiteEntry> {
        var path = "/alfresco/versions/1/people/{personId}/favorite-sites/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List favorite sites
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFavoriteSitesForPerson(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SitePaging?,_ error: Error?) -> Void)) {
        listFavoriteSitesForPersonWithRequestBuilder(personId: personId, skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List favorite sites
     - GET /alfresco/versions/1/people/{personId}/favorite-sites
     - **Note:** this endpoint is deprecated as of Alfresco 4.2, and will be removed in the future. Use `/people/{personId}/favorites` instead.  Gets a list of a person's favorite sites.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      }
    }, {
      "entry" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SitePaging> 
     */
    open class func listFavoriteSitesForPersonWithRequestBuilder(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<SitePaging> {
        var path = "/alfresco/versions/1/people/{personId}/favorite-sites"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SitePaging>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List favorites
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listFavorites(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: FavoritePaging?,_ error: Error?) -> Void)) {
        listFavoritesWithRequestBuilder(personId: personId, skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, _where: _where, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List favorites
     - GET /alfresco/versions/1/people/{personId}/favorites
     - Gets a list of favorites for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  The default sort order for the returned list of favorites is type ascending, createdAt descending. You can override the default by using the **orderBy** parameter.  You can use any of the following fields to order the results: *   `type` *   `createdAt` *   `title`  You can use the **where** parameter to restrict the list in the response to entries of a specific kind. The **where** parameter takes a value. The value is a single predicate that can include one or more **EXISTS** conditions. The **EXISTS** condition uses a single operand to limit the list to include entries that include that one property. The property values are:  *   `target/file` *   `target/folder` *   `target/site`  For example, the following **where** parameter restricts the returned list to the file favorites for a person:  ```SQL (EXISTS(target/file)) ``` You can specify more than one condition using **OR**. The predicate must be enclosed in parentheses.   For example, the following **where** parameter restricts the returned list to the file and folder favorites for a person:  ```SQL (EXISTS(target/file) OR EXISTS(target/folder)) ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "targetGuid" : "targetGuid",
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "properties" : "{}",
        "target" : {
          "site" : {
            "role" : "SiteConsumer",
            "visibility" : "PRIVATE",
            "guid" : "guid",
            "description" : "description",
            "id" : "id",
            "preset" : "preset",
            "title" : "title"
          },
          "file" : {
            "isLink" : true,
            "isFile" : true,
            "createdByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
            "nodeType" : "nodeType",
            "parentId" : "parentId",
            "content" : {
              "sizeInBytes" : 0,
              "mimeTypeName" : "mimeTypeName",
              "mimeTypeGroup" : "mimeTypeGroup",
              "mimeType" : "mimeType",
              "encoding" : "encoding"
            },
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "createdAt" : "2000-01-23T04:56:07.000+00:00",
            "path" : {
              "elements" : [ {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              }, {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              } ],
              "name" : "name",
              "isComplete" : true
            },
            "isFolder" : true,
            "permissions" : {
              "isInheritanceEnabled" : true,
              "settable" : [ "settable", "settable" ],
              "locallySet" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ],
              "inherited" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ]
            },
            "isLocked" : false,
            "modifiedByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "name" : "name",
            "id" : "id",
            "properties" : "{}",
            "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
            "isFavorite" : true
          },
          "folder" : {
            "isLink" : true,
            "isFile" : true,
            "createdByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
            "nodeType" : "nodeType",
            "parentId" : "parentId",
            "content" : {
              "sizeInBytes" : 0,
              "mimeTypeName" : "mimeTypeName",
              "mimeTypeGroup" : "mimeTypeGroup",
              "mimeType" : "mimeType",
              "encoding" : "encoding"
            },
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "createdAt" : "2000-01-23T04:56:07.000+00:00",
            "path" : {
              "elements" : [ {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              }, {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              } ],
              "name" : "name",
              "isComplete" : true
            },
            "isFolder" : true,
            "permissions" : {
              "isInheritanceEnabled" : true,
              "settable" : [ "settable", "settable" ],
              "locallySet" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ],
              "inherited" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ]
            },
            "isLocked" : false,
            "modifiedByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "name" : "name",
            "id" : "id",
            "properties" : "{}",
            "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
            "isFavorite" : true
          }
        }
      }
    }, {
      "entry" : {
        "targetGuid" : "targetGuid",
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "properties" : "{}",
        "target" : {
          "site" : {
            "role" : "SiteConsumer",
            "visibility" : "PRIVATE",
            "guid" : "guid",
            "description" : "description",
            "id" : "id",
            "preset" : "preset",
            "title" : "title"
          },
          "file" : {
            "isLink" : true,
            "isFile" : true,
            "createdByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
            "nodeType" : "nodeType",
            "parentId" : "parentId",
            "content" : {
              "sizeInBytes" : 0,
              "mimeTypeName" : "mimeTypeName",
              "mimeTypeGroup" : "mimeTypeGroup",
              "mimeType" : "mimeType",
              "encoding" : "encoding"
            },
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "createdAt" : "2000-01-23T04:56:07.000+00:00",
            "path" : {
              "elements" : [ {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              }, {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              } ],
              "name" : "name",
              "isComplete" : true
            },
            "isFolder" : true,
            "permissions" : {
              "isInheritanceEnabled" : true,
              "settable" : [ "settable", "settable" ],
              "locallySet" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ],
              "inherited" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ]
            },
            "isLocked" : false,
            "modifiedByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "name" : "name",
            "id" : "id",
            "properties" : "{}",
            "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
            "isFavorite" : true
          },
          "folder" : {
            "isLink" : true,
            "isFile" : true,
            "createdByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
            "nodeType" : "nodeType",
            "parentId" : "parentId",
            "content" : {
              "sizeInBytes" : 0,
              "mimeTypeName" : "mimeTypeName",
              "mimeTypeGroup" : "mimeTypeGroup",
              "mimeType" : "mimeType",
              "encoding" : "encoding"
            },
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "createdAt" : "2000-01-23T04:56:07.000+00:00",
            "path" : {
              "elements" : [ {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              }, {
                "aspectNames" : [ "aspectNames", "aspectNames" ],
                "name" : "name",
                "id" : "id",
                "nodeType" : "nodeType"
              } ],
              "name" : "name",
              "isComplete" : true
            },
            "isFolder" : true,
            "permissions" : {
              "isInheritanceEnabled" : true,
              "settable" : [ "settable", "settable" ],
              "locallySet" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ],
              "inherited" : [ {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              }, {
                "authorityId" : "authorityId",
                "name" : "name",
                "accessStatus" : "ALLOWED"
              } ]
            },
            "isLocked" : false,
            "modifiedByUser" : {
              "displayName" : "displayName",
              "id" : "id"
            },
            "name" : "name",
            "id" : "id",
            "properties" : "{}",
            "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
            "isFavorite" : true
          }
        }
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter include: (query) Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) * properties  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<FavoritePaging> 
     */
    open class func listFavoritesWithRequestBuilder(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<FavoritePaging> {
        var path = "/alfresco/versions/1/people/{personId}/favorites"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "where": _where, 
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<FavoritePaging>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
