//
// AuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthenticationAPI {
    /**
     Create ticket (login)
     
     - parameter ticketBodyCreate: (body) The user credential. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTicket(ticketBodyCreate: TicketBody, completion: @escaping ((_ data: TicketEntry?,_ error: Error?) -> Void)) {
        createTicketWithRequestBuilder(ticketBodyCreate: ticketBodyCreate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create ticket (login)
     - POST /authentication/versions/1/tickets
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Logs in and returns the new authentication ticket.  The userId and password properties are mandatory in the request body. For example: ```JSON {     \"userId\": \"jbloggs\",     \"password\": \"password\" } ``` To use the ticket in future requests you should pass it in the request header. For example using Javascript:   ```Javascript     request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(ticket));   ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id",
    "userId" : "userId"
  }
}}]
     
     - parameter ticketBodyCreate: (body) The user credential. 

     - returns: RequestBuilder<TicketEntry> 
     */
    open class func createTicketWithRequestBuilder(ticketBodyCreate: TicketBody) -> RequestBuilder<TicketEntry> {
        let path = "/authentication/versions/1/tickets"
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ticketBodyCreate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TicketEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete ticket (logout)
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTicket(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTicketWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete ticket (logout)
     - DELETE /authentication/versions/1/tickets/-me-
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes logged in ticket (logout). 
     - BASIC:
       - type: basic
       - name: basicAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTicketWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/authentication/versions/1/tickets/-me-"
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Validate ticket
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateTicket(completion: @escaping ((_ data: ValidTicketEntry?,_ error: Error?) -> Void)) {
        validateTicketWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Validate ticket
     - GET /authentication/versions/1/tickets/-me-
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Validates the specified ticket (derived from Authorization header) is still valid.  For example, you can pass the Authorization request header using Javascript:   ```Javascript     request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(ticket));   ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id"
  }
}}]

     - returns: RequestBuilder<ValidTicketEntry> 
     */
    open class func validateTicketWithRequestBuilder() -> RequestBuilder<ValidTicketEntry> {
        let path = "/authentication/versions/1/tickets/-me-"
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ValidTicketEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
