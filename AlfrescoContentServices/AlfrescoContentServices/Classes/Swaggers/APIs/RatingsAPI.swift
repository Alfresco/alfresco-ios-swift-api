//
// RatingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RatingsAPI {
    /**
     Create a rating
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingBodyCreate: (body) For \&quot;myRating\&quot; the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.  For example, to \&quot;like\&quot; a file the following body would be used:  &#x60;&#x60;&#x60;JSON   {     \&quot;id\&quot;: \&quot;likes\&quot;,     \&quot;myRating\&quot;: true   } &#x60;&#x60;&#x60;  
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRating(nodeId: String, ratingBodyCreate: RatingBody, fields: [String]? = nil, completion: @escaping ((_ data: RatingEntry?,_ error: Error?) -> Void)) {
        createRatingWithRequestBuilder(nodeId: nodeId, ratingBodyCreate: ratingBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a rating
     - POST /alfresco/versions/1/nodes/{nodeId}/ratings
     - Create a rating for the node with identifier **nodeId**
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "myRating" : "myRating",
    "ratedAt" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "aggregate" : {
      "average" : 6,
      "numberOfRatings" : 0
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingBodyCreate: (body) For \&quot;myRating\&quot; the type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.  For example, to \&quot;like\&quot; a file the following body would be used:  &#x60;&#x60;&#x60;JSON   {     \&quot;id\&quot;: \&quot;likes\&quot;,     \&quot;myRating\&quot;: true   } &#x60;&#x60;&#x60;  
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<RatingEntry> 
     */
    open class func createRatingWithRequestBuilder(nodeId: String, ratingBodyCreate: RatingBody, fields: [String]? = nil) -> RequestBuilder<RatingEntry> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/ratings"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ratingBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<RatingEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a rating
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingId: (path) The identifier of a rating. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRating(nodeId: String, ratingId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteRatingWithRequestBuilder(nodeId: nodeId, ratingId: ratingId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a rating
     - DELETE /alfresco/versions/1/nodes/{nodeId}/ratings/{ratingId}
     - Deletes rating **ratingId** from node **nodeId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingId: (path) The identifier of a rating. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRatingWithRequestBuilder(nodeId: String, ratingId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/ratings/{ratingId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let ratingIdPreEscape = "\(ratingId)"
        let ratingIdPostEscape = ratingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ratingId}", with: ratingIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a rating
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingId: (path) The identifier of a rating. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRating(nodeId: String, ratingId: String, fields: [String]? = nil, completion: @escaping ((_ data: RatingEntry?,_ error: Error?) -> Void)) {
        getRatingWithRequestBuilder(nodeId: nodeId, ratingId: ratingId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a rating
     - GET /alfresco/versions/1/nodes/{nodeId}/ratings/{ratingId}
     - Get the specific rating **ratingId** on node **nodeId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "myRating" : "myRating",
    "ratedAt" : "2000-01-23T04:56:07.000+00:00",
    "id" : "id",
    "aggregate" : {
      "average" : 6,
      "numberOfRatings" : 0
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter ratingId: (path) The identifier of a rating. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<RatingEntry> 
     */
    open class func getRatingWithRequestBuilder(nodeId: String, ratingId: String, fields: [String]? = nil) -> RequestBuilder<RatingEntry> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/ratings/{ratingId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let ratingIdPreEscape = "\(ratingId)"
        let ratingIdPostEscape = ratingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ratingId}", with: ratingIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<RatingEntry>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List ratings
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRatings(nodeId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: RatingPaging?,_ error: Error?) -> Void)) {
        listRatingsWithRequestBuilder(nodeId: nodeId, skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List ratings
     - GET /alfresco/versions/1/nodes/{nodeId}/ratings
     - Gets a list of ratings for node **nodeId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "myRating" : "myRating",
        "ratedAt" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "aggregate" : {
          "average" : 6,
          "numberOfRatings" : 0
        }
      }
    }, {
      "entry" : {
        "myRating" : "myRating",
        "ratedAt" : "2000-01-23T04:56:07.000+00:00",
        "id" : "id",
        "aggregate" : {
          "average" : 6,
          "numberOfRatings" : 0
        }
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<RatingPaging> 
     */
    open class func listRatingsWithRequestBuilder(nodeId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<RatingPaging> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/ratings"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentServicesAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<RatingPaging>.Type = AlfrescoContentServicesAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
