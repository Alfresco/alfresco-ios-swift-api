//
// PeopleAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PeopleAPI {
    /**
     Create person
     
     - parameter personBodyCreate: (body) The person details. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createPerson(personBodyCreate: PersonBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: PersonEntry?,_ error: Error?) -> Void)) {
        createPersonWithRequestBuilder(personBodyCreate: personBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create person
     - POST /alfresco/versions/1/people
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a person.  If applicable, the given person's login access can also be optionally disabled.  You must have admin rights to create a person.  You can set custom properties when you create a person: ```JSON {   \"id\": \"abeecher\",   \"firstName\": \"Alice\",   \"lastName\": \"Beecher\",   \"displayName\": \"Alice Beecher\",   \"email\": \"abeecher@example.com\",   \"password\": \"secret\",   \"properties\":   {     \"my:property\": \"The value\"   } } ``` **Note:** setting properties of type d:content and d:category are not supported. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "googleId" : "googleId",
    "lastName" : "lastName",
    "userStatus" : "userStatus",
    "capabilities" : "{}",
    "displayName" : "displayName",
    "jobTitle" : "jobTitle",
    "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "mobile" : "mobile",
    "emailNotificationsEnabled" : true,
    "description" : "description",
    "telephone" : "telephone",
    "enabled" : true,
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "firstName" : "firstName",
    "skypeId" : "skypeId",
    "avatarId" : "avatarId",
    "instantMessageId" : "instantMessageId",
    "location" : "location",
    "company" : {
      "address3" : "address3",
      "address2" : "address2",
      "address1" : "address1",
      "organization" : "organization",
      "postcode" : "postcode",
      "telephone" : "telephone",
      "fax" : "fax",
      "email" : "email"
    },
    "id" : "id",
    "email" : "email",
    "properties" : "{}"
  }
}}]
     
     - parameter personBodyCreate: (body) The person details. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<PersonEntry> 
     */
    open class func createPersonWithRequestBuilder(personBodyCreate: PersonBodyCreate, fields: [String]? = nil) -> RequestBuilder<PersonEntry> {
        let path = "/alfresco/versions/1/people"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<PersonEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete avatar image
     
     - parameter personId: (path) The identifier of a person. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAvatarImage(personId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAvatarImageWithRequestBuilder(personId: personId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete avatar image
     - DELETE /alfresco/versions/1/people/{personId}/avatar
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Deletes the avatar image related to person **personId**.  You must be the person or have admin rights to update a person's avatar.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAvatarImageWithRequestBuilder(personId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/avatar"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get avatar image
     
     - parameter personId: (path) The identifier of a person. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter placeholder: (query) If **true** and there is no avatar for this **personId**  then the placeholder image is returned, rather than a 404 response.  (optional, default to true)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAvatarImage(personId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, placeholder: Bool? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getAvatarImageWithRequestBuilder(personId: personId, attachment: attachment, ifModifiedSince: ifModifiedSince, placeholder: placeholder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get avatar image
     - GET /alfresco/versions/1/people/{personId}/avatar
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets the avatar image related to the person **personId**. If the person has no related avatar then  the **placeholder** query parameter can be optionally used to request a placeholder image to be returned.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter placeholder: (query) If **true** and there is no avatar for this **personId**  then the placeholder image is returned, rather than a 404 response.  (optional, default to true)

     - returns: RequestBuilder<URL> 
     */
    open class func getAvatarImageWithRequestBuilder(personId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, placeholder: Bool? = nil) -> RequestBuilder<URL> {
        var path = "/alfresco/versions/1/people/{personId}/avatar"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment, 
            "placeholder": placeholder
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a person
     
     - parameter personId: (path) The identifier of a person. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPerson(personId: String, fields: [String]? = nil, completion: @escaping ((_ data: PersonEntry?,_ error: Error?) -> Void)) {
        getPersonWithRequestBuilder(personId: personId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a person
     - GET /alfresco/versions/1/people/{personId}
     - Gets information for the person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "googleId" : "googleId",
    "lastName" : "lastName",
    "userStatus" : "userStatus",
    "capabilities" : "{}",
    "displayName" : "displayName",
    "jobTitle" : "jobTitle",
    "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "mobile" : "mobile",
    "emailNotificationsEnabled" : true,
    "description" : "description",
    "telephone" : "telephone",
    "enabled" : true,
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "firstName" : "firstName",
    "skypeId" : "skypeId",
    "avatarId" : "avatarId",
    "instantMessageId" : "instantMessageId",
    "location" : "location",
    "company" : {
      "address3" : "address3",
      "address2" : "address2",
      "address1" : "address1",
      "organization" : "organization",
      "postcode" : "postcode",
      "telephone" : "telephone",
      "fax" : "fax",
      "email" : "email"
    },
    "id" : "id",
    "email" : "email",
    "properties" : "{}"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<PersonEntry> 
     */
    open class func getPersonWithRequestBuilder(personId: String, fields: [String]? = nil) -> RequestBuilder<PersonEntry> {
        var path = "/alfresco/versions/1/people/{personId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<PersonEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List people
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the person. The following optional fields can be requested: * properties * aspectNames * capabilities  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listPeople(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: PersonPaging?,_ error: Error?) -> Void)) {
        listPeopleWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List people
     - GET /alfresco/versions/1/people
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  List people.  You can use the **include** parameter to return any additional information.  The default sort order for the returned list is for people to be sorted by ascending id. You can override the default by using the **orderBy** parameter.  You can use any of the following fields to order the results: * id * firstName * lastName 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "googleId" : "googleId",
        "lastName" : "lastName",
        "userStatus" : "userStatus",
        "capabilities" : "{}",
        "displayName" : "displayName",
        "jobTitle" : "jobTitle",
        "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
        "mobile" : "mobile",
        "emailNotificationsEnabled" : true,
        "description" : "description",
        "telephone" : "telephone",
        "enabled" : true,
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "firstName" : "firstName",
        "skypeId" : "skypeId",
        "avatarId" : "avatarId",
        "instantMessageId" : "instantMessageId",
        "location" : "location",
        "company" : {
          "address3" : "address3",
          "address2" : "address2",
          "address1" : "address1",
          "organization" : "organization",
          "postcode" : "postcode",
          "telephone" : "telephone",
          "fax" : "fax",
          "email" : "email"
        },
        "id" : "id",
        "email" : "email",
        "properties" : "{}"
      }
    }, {
      "entry" : {
        "googleId" : "googleId",
        "lastName" : "lastName",
        "userStatus" : "userStatus",
        "capabilities" : "{}",
        "displayName" : "displayName",
        "jobTitle" : "jobTitle",
        "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
        "mobile" : "mobile",
        "emailNotificationsEnabled" : true,
        "description" : "description",
        "telephone" : "telephone",
        "enabled" : true,
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "firstName" : "firstName",
        "skypeId" : "skypeId",
        "avatarId" : "avatarId",
        "instantMessageId" : "instantMessageId",
        "location" : "location",
        "company" : {
          "address3" : "address3",
          "address2" : "address2",
          "address1" : "address1",
          "organization" : "organization",
          "postcode" : "postcode",
          "telephone" : "telephone",
          "fax" : "fax",
          "email" : "email"
        },
        "id" : "id",
        "email" : "email",
        "properties" : "{}"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the person. The following optional fields can be requested: * properties * aspectNames * capabilities  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<PersonPaging> 
     */
    open class func listPeopleWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<PersonPaging> {
        let path = "/alfresco/versions/1/people"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<PersonPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Request password reset
     
     - parameter personId: (path) The identifier of a person. 
     - parameter clientBody: (body) The client name to send email with app-specific url. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func requestPasswordReset(personId: String, clientBody: ClientBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        requestPasswordResetWithRequestBuilder(personId: personId, clientBody: clientBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Request password reset
     - POST /alfresco/versions/1/people/{personId}/request-password-reset
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Initiates the reset password workflow to send an email with reset password instruction to the user's registered email.  The client is mandatory in the request body. For example: ```JSON {   \"client\": \"myClient\" } ``` **Note:** The client must be registered before this API can send an email. See [server documentation]. However, out-of-the-box share is registered as a default client, so you could pass **share** as the client name: ```JSON {   \"client\": \"share\" } ``` **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter clientBody: (body) The client name to send email with app-specific url. 

     - returns: RequestBuilder<Void> 
     */
    open class func requestPasswordResetWithRequestBuilder(personId: String, clientBody: ClientBody) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/request-password-reset"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clientBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset password
     
     - parameter personId: (path) The identifier of a person. 
     - parameter passwordResetBody: (body) The reset password details 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPassword(personId: String, passwordResetBody: PasswordResetBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resetPasswordWithRequestBuilder(personId: personId, passwordResetBody: passwordResetBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset password
     - POST /alfresco/versions/1/people/{personId}/reset-password
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Resets user's password  The password, id and key properties are mandatory in the request body. For example: ```JSON {   \"password\":\"newPassword\",   \"id\":\"activiti$10\",   \"key\":\"4dad6d00-0daf-413a-b200-f64af4e12345\" } ``` **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter passwordResetBody: (body) The reset password details 

     - returns: RequestBuilder<Void> 
     */
    open class func resetPasswordWithRequestBuilder(personId: String, passwordResetBody: PasswordResetBody) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/reset-password"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: passwordResetBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update avatar image
     
     - parameter personId: (path) The identifier of a person. 
     - parameter contentBodyUpdate: (body) The binary content 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAvatarImage(personId: String, contentBodyUpdate: Data, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateAvatarImageWithRequestBuilder(personId: personId, contentBodyUpdate: contentBodyUpdate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update avatar image
     - PUT /alfresco/versions/1/people/{personId}/avatar
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Updates the avatar image related to the person **personId**.  The request body should be the binary stream for the avatar image. The content type of the file  should be an image file. This will be used to generate an \"avatar\" thumbnail rendition.  You must be the person or have admin rights to update a person's avatar.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter contentBodyUpdate: (body) The binary content 

     - returns: RequestBuilder<Void> 
     */
    open class func updateAvatarImageWithRequestBuilder(personId: String, contentBodyUpdate: Data) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/avatar"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contentBodyUpdate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update person
     
     - parameter personId: (path) The identifier of a person. 
     - parameter personBodyUpdate: (body) The person details. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePerson(personId: String, personBodyUpdate: PersonBodyUpdate, fields: [String]? = nil, completion: @escaping ((_ data: PersonEntry?,_ error: Error?) -> Void)) {
        updatePersonWithRequestBuilder(personId: personId, personBodyUpdate: personBodyUpdate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update person
     - PUT /alfresco/versions/1/people/{personId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the given person's details.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  If applicable, the given person's login access can also be optionally disabled or re-enabled.  You must have admin rights to update a person — unless updating your own details.  If you are changing your password, as a non-admin user, then the existing password must also be supplied (using the oldPassword field in addition to the new password value).  Admin users cannot be disabled by setting enabled to false.  Non-admin users may not disable themselves.  You can set custom properties when you update a person: ```JSON {   \"firstName\": \"Alice\",   \"properties\":   {     \"my:property\": \"The value\"   } } ``` **Note:** setting properties of type d:content and d:category are not supported. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "googleId" : "googleId",
    "lastName" : "lastName",
    "userStatus" : "userStatus",
    "capabilities" : "{}",
    "displayName" : "displayName",
    "jobTitle" : "jobTitle",
    "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
    "mobile" : "mobile",
    "emailNotificationsEnabled" : true,
    "description" : "description",
    "telephone" : "telephone",
    "enabled" : true,
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "firstName" : "firstName",
    "skypeId" : "skypeId",
    "avatarId" : "avatarId",
    "instantMessageId" : "instantMessageId",
    "location" : "location",
    "company" : {
      "address3" : "address3",
      "address2" : "address2",
      "address1" : "address1",
      "organization" : "organization",
      "postcode" : "postcode",
      "telephone" : "telephone",
      "fax" : "fax",
      "email" : "email"
    },
    "id" : "id",
    "email" : "email",
    "properties" : "{}"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter personBodyUpdate: (body) The person details. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<PersonEntry> 
     */
    open class func updatePersonWithRequestBuilder(personId: String, personBodyUpdate: PersonBodyUpdate, fields: [String]? = nil) -> RequestBuilder<PersonEntry> {
        var path = "/alfresco/versions/1/people/{personId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<PersonEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
