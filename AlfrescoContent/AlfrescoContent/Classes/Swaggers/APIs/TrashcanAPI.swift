//
// TrashcanAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TrashcanAPI {
    /**
     Permanently delete a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDeletedNode(nodeId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteDeletedNodeWithRequestBuilder(nodeId: nodeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Permanently delete a deleted node
     - DELETE /alfresco/versions/1/deleted-nodes/{nodeId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Permanently deletes the deleted node **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter nodeId: (path) The identifier of a node. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDeletedNodeWithRequestBuilder(nodeId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get rendition information for a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArchivedNodeRendition(nodeId: String, renditionId: String, completion: @escaping ((_ data: RenditionEntry?,_ error: Error?) -> Void)) {
        getArchivedNodeRenditionWithRequestBuilder(nodeId: nodeId, renditionId: renditionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rendition information for a deleted node
     - GET /alfresco/versions/1/deleted-nodes/{nodeId}/renditions/{renditionId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "status" : "CREATED"
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 

     - returns: RequestBuilder<RenditionEntry> 
     */
    open class func getArchivedNodeRenditionWithRequestBuilder(nodeId: String, renditionId: String) -> RequestBuilder<RenditionEntry> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}/renditions/{renditionId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RenditionEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get rendition content of a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter placeholder: (query) If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getArchivedNodeRenditionContent(nodeId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, placeholder: Bool? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getArchivedNodeRenditionContentWithRequestBuilder(nodeId: nodeId, renditionId: renditionId, attachment: attachment, ifModifiedSince: ifModifiedSince, range: range, placeholder: placeholder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rendition content of a deleted node
     - GET /alfresco/versions/1/deleted-nodes/{nodeId}/renditions/{renditionId}/content
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter placeholder: (query) If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response.  (optional, default to false)

     - returns: RequestBuilder<Data> 
     */
    open class func getArchivedNodeRenditionContentWithRequestBuilder(nodeId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, placeholder: Bool? = nil) -> RequestBuilder<Data> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}/renditions/{renditionId}/content"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment, 
            "placeholder": placeholder
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON(),
            "Range": range
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter include: (query) Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeletedNode(nodeId: String, include: [String]? = nil, completion: @escaping ((_ data: DeletedNodeEntry?,_ error: Error?) -> Void)) {
        getDeletedNodeWithRequestBuilder(nodeId: nodeId, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a deleted node
     - GET /alfresco/versions/1/deleted-nodes/{nodeId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the specific deleted node **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : ""
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter include: (query) Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition  (optional)

     - returns: RequestBuilder<DeletedNodeEntry> 
     */
    open class func getDeletedNodeWithRequestBuilder(nodeId: String, include: [String]? = nil) -> RequestBuilder<DeletedNodeEntry> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include
        ])

        let requestBuilder: RequestBuilder<DeletedNodeEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get deleted node content
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDeletedNodeContent(nodeId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getDeletedNodeContentWithRequestBuilder(nodeId: nodeId, attachment: attachment, ifModifiedSince: ifModifiedSince, range: range).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get deleted node content
     - GET /alfresco/versions/1/deleted-nodes/{nodeId}/content
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the deleted node with identifier **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func getDeletedNodeContentWithRequestBuilder(nodeId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil) -> RequestBuilder<Data> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}/content"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON(),
            "Range": range
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List renditions for a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeletedNodeRenditions(nodeId: String, _where: String? = nil, completion: @escaping ((_ data: RenditionPaging?,_ error: Error?) -> Void)) {
        listDeletedNodeRenditionsWithRequestBuilder(nodeId: nodeId, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List renditions for a deleted node
     - GET /alfresco/versions/1/deleted-nodes/{nodeId}/renditions
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where** clause will return just the CREATED renditions:  ``` (status='CREATED') ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    }, {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)

     - returns: RequestBuilder<RenditionPaging> 
     */
    open class func listDeletedNodeRenditionsWithRequestBuilder(nodeId: String, _where: String? = nil) -> RequestBuilder<RenditionPaging> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}/renditions"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "where": _where
        ])

        let requestBuilder: RequestBuilder<RenditionPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List deleted nodes
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter include: (query) Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isLocked * path * properties * permissions  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDeletedNodes(skipCount: Int? = nil, maxItems: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: DeletedNodesPaging?,_ error: Error?) -> Void)) {
        listDeletedNodesWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List deleted nodes
     - GET /alfresco/versions/1/deleted-nodes
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of deleted nodes for the current user.  If the current user is an administrator deleted nodes for all users will be returned.  The list of deleted nodes will be ordered with the most recently deleted node at the top of the list. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : ""
    }, {
      "entry" : ""
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter include: (query) Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isLocked * path * properties * permissions  (optional)

     - returns: RequestBuilder<DeletedNodesPaging> 
     */
    open class func listDeletedNodesWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, include: [String]? = nil) -> RequestBuilder<DeletedNodesPaging> {
        let path = "/alfresco/versions/1/deleted-nodes"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "include": include
        ])

        let requestBuilder: RequestBuilder<DeletedNodesPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Restore a deleted node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter deletedNodeBodyRestore: (body) The targetParentId if the node is restored to a new location. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func restoreDeletedNode(nodeId: String, fields: [String]? = nil, deletedNodeBodyRestore: DeletedNodeBodyRestore? = nil, completion: @escaping ((_ data: NodeEntry?,_ error: Error?) -> Void)) {
        restoreDeletedNodeWithRequestBuilder(nodeId: nodeId, fields: fields, deletedNodeBodyRestore: deletedNodeBodyRestore).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Restore a deleted node
     - POST /alfresco/versions/1/deleted-nodes/{nodeId}/restore
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Attempts to restore the deleted node **nodeId** to its original location or to a new location.  If the node is successfully restored to its former primary parent, then only the primary child association will be restored, including recursively for any primary children. It should be noted that no other secondary child associations or peer associations will be restored, for any of the nodes within the primary parent-child hierarchy of restored nodes, irrespective of whether these associations were to nodes within or outside of the restored hierarchy.  Also, any previously shared link will not be restored since it is deleted at the time of delete of each node. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "isLink" : true,
    "isFile" : true,
    "createdByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
    "nodeType" : "nodeType",
    "parentId" : "parentId",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "path" : {
      "elements" : [ {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      }, {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      } ],
      "name" : "name",
      "isComplete" : true
    },
    "isFolder" : true,
    "permissions" : {
      "isInheritanceEnabled" : true,
      "settable" : [ "settable", "settable" ],
      "locallySet" : [ {
        "authorityId" : "authorityId",
        "name" : "name",
        "accessStatus" : "ALLOWED"
      }, {
        "authorityId" : "authorityId",
        "name" : "name",
        "accessStatus" : "ALLOWED"
      } ],
      "inherited" : [ {
        "authorityId" : "authorityId",
        "name" : "name",
        "accessStatus" : "ALLOWED"
      }, {
        "authorityId" : "authorityId",
        "name" : "name",
        "accessStatus" : "ALLOWED"
      } ]
    },
    "isLocked" : false,
    "modifiedByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "name" : "name",
    "definition" : {
      "properties" : [ {
        "isProtected" : true,
        "defaultValue" : "defaultValue",
        "dataType" : "dataType",
        "isMultiValued" : true,
        "description" : "description",
        "isMandatoryEnforced" : true,
        "id" : "id",
        "title" : "title",
        "constraints" : [ {
          "description" : "description",
          "id" : "id",
          "type" : "type",
          "title" : "title",
          "parameters" : {
            "key" : "{}"
          }
        }, {
          "description" : "description",
          "id" : "id",
          "type" : "type",
          "title" : "title",
          "parameters" : {
            "key" : "{}"
          }
        } ],
        "isMandatory" : true
      }, {
        "isProtected" : true,
        "defaultValue" : "defaultValue",
        "dataType" : "dataType",
        "isMultiValued" : true,
        "description" : "description",
        "isMandatoryEnforced" : true,
        "id" : "id",
        "title" : "title",
        "constraints" : [ {
          "description" : "description",
          "id" : "id",
          "type" : "type",
          "title" : "title",
          "parameters" : {
            "key" : "{}"
          }
        }, {
          "description" : "description",
          "id" : "id",
          "type" : "type",
          "title" : "title",
          "parameters" : {
            "key" : "{}"
          }
        } ],
        "isMandatory" : true
      } ]
    },
    "id" : "id",
    "properties" : "{}",
    "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
    "isFavorite" : true
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter deletedNodeBodyRestore: (body) The targetParentId if the node is restored to a new location. (optional)

     - returns: RequestBuilder<NodeEntry> 
     */
    open class func restoreDeletedNodeWithRequestBuilder(nodeId: String, fields: [String]? = nil, deletedNodeBodyRestore: DeletedNodeBodyRestore? = nil) -> RequestBuilder<NodeEntry> {
        var path = "/alfresco/versions/1/deleted-nodes/{nodeId}/restore"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deletedNodeBodyRestore)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<NodeEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
