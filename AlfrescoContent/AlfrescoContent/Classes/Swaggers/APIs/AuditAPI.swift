//
// AuditAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuditAPI {
    /**
     Permanently delete audit entries for an audit application
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter _where: (query) Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuditEntriesForAuditApp(auditApplicationId: String, _where: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAuditEntriesForAuditAppWithRequestBuilder(auditApplicationId: auditApplicationId, _where: _where).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Permanently delete audit entries for an audit application
     - DELETE /alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Permanently delete audit entries for an audit application **auditApplicationId**.  The **where** clause must be specified, either with an inclusive time period or for an inclusive range of ids. The delete is within the context of the given audit application.  For example:  *   ```where=(createdAt BETWEEN ('2017-06-02T12:13:51.593+01:00' , '2017-06-04T10:05:16.536+01:00')``` *   ```where=(id BETWEEN ('1234', '4321')```  You must have admin rights to delete audit information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter _where: (query) Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuditEntriesForAuditAppWithRequestBuilder(auditApplicationId: String, _where: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "where": _where
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Permanently delete an audit entry
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditEntryId: (path) The identifier of an audit entry. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAuditEntry(auditApplicationId: String, auditEntryId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAuditEntryWithRequestBuilder(auditApplicationId: auditApplicationId, auditEntryId: auditEntryId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Permanently delete an audit entry
     - DELETE /alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Permanently delete a single audit entry **auditEntryId**.  You must have admin rights to delete audit information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditEntryId: (path) The identifier of an audit entry. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuditEntryWithRequestBuilder(auditApplicationId: String, auditEntryId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let auditEntryIdPreEscape = "\(auditEntryId)"
        let auditEntryIdPostEscape = auditEntryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditEntryId}", with: auditEntryIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get audit application info
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter include: (query) Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested: * max * min  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuditApp(auditApplicationId: String, fields: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: AuditApp?,_ error: Error?) -> Void)) {
        getAuditAppWithRequestBuilder(auditApplicationId: auditApplicationId, fields: fields, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get audit application info
     - GET /alfresco/versions/1/audit-applications/{auditApplicationId}
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Get status of an audit application **auditApplicationId**.  You must have admin rights to retrieve audit information.  You can use the **include** parameter to return the minimum and/or maximum audit record id for the application. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "maxEntryId" : 0,
  "isEnabled" : true,
  "name" : "name",
  "minEntryId" : 6,
  "id" : "id"
}}]
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter include: (query) Also include the current minimum and/or maximum audit entry ids for the application. The following optional fields can be requested: * max * min  (optional)

     - returns: RequestBuilder<AuditApp> 
     */
    open class func getAuditAppWithRequestBuilder(auditApplicationId: String, fields: [String]? = nil, include: [String]? = nil) -> RequestBuilder<AuditApp> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields, 
            "include": include
        ])

        let requestBuilder: RequestBuilder<AuditApp>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get audit entry
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditEntryId: (path) The identifier of an audit entry. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuditEntry(auditApplicationId: String, auditEntryId: String, fields: [String]? = nil, completion: @escaping ((_ data: AuditEntryEntry?,_ error: Error?) -> Void)) {
        getAuditEntryWithRequestBuilder(auditApplicationId: auditApplicationId, auditEntryId: auditEntryId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get audit entry
     - GET /alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets audit entry **auditEntryId**.  You must have admin rights to access audit information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "createdByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "values" : "{}",
    "auditApplicationId" : "auditApplicationId",
    "id" : "id"
  }
}}]
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditEntryId: (path) The identifier of an audit entry. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<AuditEntryEntry> 
     */
    open class func getAuditEntryWithRequestBuilder(auditApplicationId: String, auditEntryId: String, fields: [String]? = nil) -> RequestBuilder<AuditEntryEntry> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let auditEntryIdPreEscape = "\(auditEntryId)"
        let auditEntryIdPostEscape = auditEntryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditEntryId}", with: auditEntryIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<AuditEntryEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List audit applications
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuditApps(skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: AuditAppPaging?,_ error: Error?) -> Void)) {
        listAuditAppsWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List audit applications
     - GET /alfresco/versions/1/audit-applications
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets a list of audit applications in this repository.  This list may include pre-configured audit applications, if enabled, such as:  * alfresco-access * CMISChangeLog * Alfresco Tagging Service * Alfresco Sync Service (used by Enterprise Cloud Sync)  You must have admin rights to retrieve audit information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "maxEntryId" : 0,
        "isEnabled" : true,
        "name" : "name",
        "minEntryId" : 6,
        "id" : "id"
      }
    }, {
      "entry" : {
        "maxEntryId" : 0,
        "isEnabled" : true,
        "name" : "name",
        "minEntryId" : 6,
        "id" : "id"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<AuditAppPaging> 
     */
    open class func listAuditAppsWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<AuditAppPaging> {
        let path = "/alfresco/versions/1/audit-applications"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<AuditAppPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List audit entries for an audit application
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter omitTotalItems: (query) A boolean to control if the response provides the total numbers of items in the collection. If not supplied then the default value is false.  (optional, default to false)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/login/user&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/transaction/action&#39; and valuesValue&#x3D;&#39;DELETE&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the audit entry. The following optional fields can be requested: * values  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuditEntriesForAuditApp(auditApplicationId: String, skipCount: Int? = nil, omitTotalItems: Bool? = nil, orderBy: [String]? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: AuditEntryPaging?,_ error: Error?) -> Void)) {
        listAuditEntriesForAuditAppWithRequestBuilder(auditApplicationId: auditApplicationId, skipCount: skipCount, omitTotalItems: omitTotalItems, orderBy: orderBy, maxItems: maxItems, _where: _where, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List audit entries for an audit application
     - GET /alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets a list of audit entries for audit application **auditApplicationId**.  You can use the **include** parameter to return additional **values** information.  The list can be filtered by one or more of: * **createdByUser** person id * **createdAt** inclusive time period * **id** inclusive range of ids * **valuesKey** audit entry values contains the exact matching key * **valuesValue** audit entry values contains the exact matching value  The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.  For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.  You must have admin rights to retrieve audit information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "values" : "{}",
        "auditApplicationId" : "auditApplicationId",
        "id" : "id"
      }
    }, {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "values" : "{}",
        "auditApplicationId" : "auditApplicationId",
        "id" : "id"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter omitTotalItems: (query) A boolean to control if the response provides the total numbers of items in the collection. If not supplied then the default value is false.  (optional, default to false)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/login/user&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/transaction/action&#39; and valuesValue&#x3D;&#39;DELETE&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the audit entry. The following optional fields can be requested: * values  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<AuditEntryPaging> 
     */
    open class func listAuditEntriesForAuditAppWithRequestBuilder(auditApplicationId: String, skipCount: Int? = nil, omitTotalItems: Bool? = nil, orderBy: [String]? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<AuditEntryPaging> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}/audit-entries"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "omitTotalItems": omitTotalItems, 
            "orderBy": orderBy, 
            "maxItems": maxItems?.encodeToJSON(), 
            "where": _where, 
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<AuditEntryPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List audit entries for a node
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the audit entry. The following optional fields can be requested: * values  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAuditEntriesForNode(nodeId: String, skipCount: Int? = nil, orderBy: [String]? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: AuditEntryPaging?,_ error: Error?) -> Void)) {
        listAuditEntriesForNodeWithRequestBuilder(nodeId: nodeId, skipCount: skipCount, orderBy: orderBy, maxItems: maxItems, _where: _where, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List audit entries for a node
     - GET /alfresco/versions/1/nodes/{nodeId}/audit-entries
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Gets a list of audit entries for node **nodeId**.  The list can be filtered by **createdByUser** and for a given inclusive time period.  The default sort order is **createdAt** ascending, but you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.  For example, specifying ```orderBy=createdAt DESC``` returns audit entries in descending **createdAt** order.  This relies on the pre-configured 'alfresco-access' audit application. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "values" : "{}",
        "auditApplicationId" : "auditApplicationId",
        "id" : "id"
      }
    }, {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "createdByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "values" : "{}",
        "auditApplicationId" : "auditApplicationId",
        "id" : "id"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the audit entry. The following optional fields can be requested: * values  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<AuditEntryPaging> 
     */
    open class func listAuditEntriesForNodeWithRequestBuilder(nodeId: String, skipCount: Int? = nil, orderBy: [String]? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<AuditEntryPaging> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/audit-entries"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "orderBy": orderBy, 
            "maxItems": maxItems?.encodeToJSON(), 
            "where": _where, 
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<AuditEntryPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update audit application info
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditAppBodyUpdate: (body) The audit application to update. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAuditApp(auditApplicationId: String, auditAppBodyUpdate: AuditBodyUpdate, fields: [String]? = nil, completion: @escaping ((_ data: AuditApp?,_ error: Error?) -> Void)) {
        updateAuditAppWithRequestBuilder(auditApplicationId: auditApplicationId, auditAppBodyUpdate: auditAppBodyUpdate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update audit application info
     - PUT /alfresco/versions/1/audit-applications/{auditApplicationId}
     - **Note:** this endpoint is available in Alfresco 5.2.2 and newer versions.  Disable or re-enable the audit application **auditApplicationId**.  New audit entries will not be created for a disabled audit application until it is re-enabled (and system-wide auditing is also enabled).  Note, it is still possible to query &/or delete any existing audit entries even if auditing is disabled for the audit application.  You must have admin rights to update audit application. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "maxEntryId" : 0,
  "isEnabled" : true,
  "name" : "name",
  "minEntryId" : 6,
  "id" : "id"
}}]
     
     - parameter auditApplicationId: (path) The identifier of an audit application. 
     - parameter auditAppBodyUpdate: (body) The audit application to update. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<AuditApp> 
     */
    open class func updateAuditAppWithRequestBuilder(auditApplicationId: String, auditAppBodyUpdate: AuditBodyUpdate, fields: [String]? = nil) -> RequestBuilder<AuditApp> {
        var path = "/alfresco/versions/1/audit-applications/{auditApplicationId}"
        let auditApplicationIdPreEscape = "\(auditApplicationId)"
        let auditApplicationIdPostEscape = auditApplicationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{auditApplicationId}", with: auditApplicationIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: auditAppBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<AuditApp>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
