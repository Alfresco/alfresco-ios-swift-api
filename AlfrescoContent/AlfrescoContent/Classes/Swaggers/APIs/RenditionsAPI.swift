//
// RenditionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RenditionsAPI {
    /**
     Create rendition
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionBodyCreate: (body) The rendition \&quot;id\&quot;. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRendition(nodeId: String, renditionBodyCreate: RenditionBodyCreate, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createRenditionWithRequestBuilder(nodeId: nodeId, renditionBodyCreate: renditionBodyCreate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create rendition
     - POST /alfresco/versions/1/nodes/{nodeId}/renditions
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  An asynchronous request to create a rendition for file **nodeId**.  The rendition is specified by name **id** in the request body: ```JSON {   \"id\":\"doclib\" } ```  Multiple names may be specified as a comma separated list or using a list format: ```JSON [   {      \"id\": \"doclib\"   },   {      \"id\": \"avatar\"   } ] ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionBodyCreate: (body) The rendition \&quot;id\&quot;. 

     - returns: RequestBuilder<Void> 
     */
    open class func createRenditionWithRequestBuilder(nodeId: String, renditionBodyCreate: RenditionBodyCreate) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/renditions"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: renditionBodyCreate)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get rendition information
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRendition(nodeId: String, renditionId: String, completion: @escaping ((_ data: RenditionEntry?,_ error: Error?) -> Void)) {
        getRenditionWithRequestBuilder(nodeId: nodeId, renditionId: renditionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rendition information
     - GET /alfresco/versions/1/nodes/{nodeId}/renditions/{renditionId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition information for **renditionId** of file **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "status" : "CREATED"
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 

     - returns: RequestBuilder<RenditionEntry> 
     */
    open class func getRenditionWithRequestBuilder(nodeId: String, renditionId: String) -> RequestBuilder<RenditionEntry> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/renditions/{renditionId}"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RenditionEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get rendition content
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter placeholder: (query) If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRenditionContent(nodeId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, placeholder: Bool? = nil, completion: @escaping ((_ data: URL?,_ error: Error?) -> Void)) {
        getRenditionContentWithRequestBuilder(nodeId: nodeId, renditionId: renditionId, attachment: attachment, ifModifiedSince: ifModifiedSince, range: range, placeholder: placeholder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get rendition content
     - GET /alfresco/versions/1/nodes/{nodeId}/renditions/{renditionId}/content
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for **renditionId** of file **nodeId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter placeholder: (query) If **true** and there is no rendition for this **nodeId** and **renditionId**,  then the placeholder image for the mime type of this rendition is returned, rather  than a 404 response.  (optional, default to false)

     - returns: RequestBuilder<URL> 
     */
    open class func getRenditionContentWithRequestBuilder(nodeId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, placeholder: Bool? = nil) -> RequestBuilder<URL> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/renditions/{renditionId}/content"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment, 
            "placeholder": placeholder
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON(),
            "Range": range
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List renditions
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRenditions(nodeId: String, _where: String? = nil, completion: @escaping ((_ data: RenditionPaging?,_ error: Error?) -> Void)) {
        listRenditionsWithRequestBuilder(nodeId: nodeId, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List renditions
     - GET /alfresco/versions/1/nodes/{nodeId}/renditions
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for each rendition of the the file **nodeId**, including the rendition id.  Each rendition returned has a **status**: CREATED means it is available to view or download, NOT_CREATED means the rendition can be requested.  You can use the **where** parameter to filter the returned renditions by **status**. For example, the following **where**  clause will return just the CREATED renditions:    ``` (status='CREATED') ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    }, {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter nodeId: (path) The identifier of a node. 
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)

     - returns: RequestBuilder<RenditionPaging> 
     */
    open class func listRenditionsWithRequestBuilder(nodeId: String, _where: String? = nil) -> RequestBuilder<RenditionPaging> {
        var path = "/alfresco/versions/1/nodes/{nodeId}/renditions"
        let nodeIdPreEscape = "\(nodeId)"
        let nodeIdPostEscape = nodeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{nodeId}", with: nodeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "where": _where
        ])

        let requestBuilder: RequestBuilder<RenditionPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
