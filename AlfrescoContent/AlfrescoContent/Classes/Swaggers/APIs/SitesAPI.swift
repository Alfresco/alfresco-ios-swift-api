//
// SitesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SitesAPI {
    /**
     Approve a site membership request
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter inviteeId: (path) The invitee user name. 
     - parameter siteMembershipApprovalBody: (body) Accepting a request to join, optionally, allows assignment of a role to the user.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func approveSiteMembershipRequest(siteId: String, inviteeId: String, siteMembershipApprovalBody: SiteMembershipApprovalBody? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        approveSiteMembershipRequestWithRequestBuilder(siteId: siteId, inviteeId: inviteeId, siteMembershipApprovalBody: siteMembershipApprovalBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Approve a site membership request
     - POST /alfresco/versions/1/sites/{siteId}/site-membership-requests/{inviteeId}/approve
     - Approve a site membership request. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter inviteeId: (path) The invitee user name. 
     - parameter siteMembershipApprovalBody: (body) Accepting a request to join, optionally, allows assignment of a role to the user.  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func approveSiteMembershipRequestWithRequestBuilder(siteId: String, inviteeId: String, siteMembershipApprovalBody: SiteMembershipApprovalBody? = nil) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/sites/{siteId}/site-membership-requests/{inviteeId}/approve"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let inviteeIdPreEscape = "\(inviteeId)"
        let inviteeIdPostEscape = inviteeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inviteeId}", with: inviteeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipApprovalBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a site
     
     - parameter siteBodyCreate: (body) The site details 
     - parameter skipConfiguration: (query) Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (optional, default to false)
     - parameter skipAddToFavorites: (query) Flag to indicate whether the site should not be added to the user&#39;s site favorites. (optional, default to false)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSite(siteBodyCreate: SiteBodyCreate, skipConfiguration: Bool? = nil, skipAddToFavorites: Bool? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteEntry?,_ error: Error?) -> Void)) {
        createSiteWithRequestBuilder(siteBodyCreate: siteBodyCreate, skipConfiguration: skipConfiguration, skipAddToFavorites: skipAddToFavorites, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a site
     - POST /alfresco/versions/1/sites
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Creates a default site with the given details.  Unless explicitly specified, the site id will be generated from the site title. The site id must be unique and only contain alphanumeric and/or dash characters.  Note: the id of a site cannot be updated once the site has been created.  For example, to create a public site called \"Marketing\" the following body could be used: ```JSON {   \"title\": \"Marketing\",   \"visibility\": \"PUBLIC\" } ```  The creation of the (surf) configuration files required by Share can be skipped via the **skipConfiguration** query parameter.  **Note:** if skipped then such a site will **not** work within Share.  The addition of the site to the user's site favorites can be skipped via the **skipAddToFavorites** query parameter.  The creator will be added as a member with Site Manager role.  When you create a site, a container called **documentLibrary** is created for you in the new site.  This container is the root folder for content stored in the site. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "visibility" : "PRIVATE",
    "guid" : "guid",
    "description" : "description",
    "id" : "id",
    "preset" : "preset",
    "title" : "title"
  }
}}]
     
     - parameter siteBodyCreate: (body) The site details 
     - parameter skipConfiguration: (query) Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (optional, default to false)
     - parameter skipAddToFavorites: (query) Flag to indicate whether the site should not be added to the user&#39;s site favorites. (optional, default to false)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteEntry> 
     */
    open class func createSiteWithRequestBuilder(siteBodyCreate: SiteBodyCreate, skipConfiguration: Bool? = nil, skipAddToFavorites: Bool? = nil, fields: [String]? = nil) -> RequestBuilder<SiteEntry> {
        let path = "/alfresco/versions/1/sites"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipConfiguration": skipConfiguration, 
            "skipAddToFavorites": skipAddToFavorites, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a site membership
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteMembershipBodyCreate: (body) The person to add and their role 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSiteMembership(siteId: String, siteMembershipBodyCreate: SiteMembershipBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: SiteMemberEntry?,_ error: Error?) -> Void)) {
        createSiteMembershipWithRequestBuilder(siteId: siteId, siteMembershipBodyCreate: siteMembershipBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a site membership
     - POST /alfresco/versions/1/sites/{siteId}/members
     - Creates a site membership for person **personId** on site **siteId**.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager  **Note:** You can create more than one site membership by  specifying a list of people in the JSON body like this:  ```JSON [   {     \"role\": \"SiteConsumer\",     \"id\": \"joe\"   },   {     \"role\": \"SiteConsumer\",     \"id\": \"fred\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "person" : {
      "googleId" : "googleId",
      "lastName" : "lastName",
      "userStatus" : "userStatus",
      "capabilities" : "{}",
      "displayName" : "displayName",
      "jobTitle" : "jobTitle",
      "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
      "mobile" : "mobile",
      "emailNotificationsEnabled" : true,
      "description" : "description",
      "telephone" : "telephone",
      "enabled" : true,
      "aspectNames" : [ "aspectNames", "aspectNames" ],
      "firstName" : "firstName",
      "skypeId" : "skypeId",
      "avatarId" : "avatarId",
      "instantMessageId" : "instantMessageId",
      "location" : "location",
      "company" : {
        "address3" : "address3",
        "address2" : "address2",
        "address1" : "address1",
        "organization" : "organization",
        "postcode" : "postcode",
        "telephone" : "telephone",
        "fax" : "fax",
        "email" : "email"
      },
      "id" : "id",
      "email" : "email",
      "properties" : "{}"
    },
    "id" : "id"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteMembershipBodyCreate: (body) The person to add and their role 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMemberEntry> 
     */
    open class func createSiteMembershipWithRequestBuilder(siteId: String, siteMembershipBodyCreate: SiteMembershipBodyCreate, fields: [String]? = nil) -> RequestBuilder<SiteMemberEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}/members"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMemberEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a site membership request
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteMembershipRequestBodyCreate: (body) Site membership request details 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSiteMembershipRequestForPerson(personId: String, siteMembershipRequestBodyCreate: SiteMembershipRequestBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: SiteMembershipRequestEntry?,_ error: Error?) -> Void)) {
        createSiteMembershipRequestForPersonWithRequestBuilder(personId: personId, siteMembershipRequestBodyCreate: siteMembershipRequestBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a site membership request
     - POST /alfresco/versions/1/people/{personId}/site-membership-requests
     - Create a site membership request for yourself on the site with the identifier of **id**, specified in the JSON body.  The result of the request differs depending on the type of site.  * For a **public** site, you join the site immediately as a SiteConsumer. * For a **moderated** site, your request is added to the site membership request list. The request waits for approval from the Site Manager. * You cannot request membership of a **private** site. Members are invited by the site administrator.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   **Note:** You can create site membership requests for more than one site by  specifying a list of sites in the JSON body like this:  ```JSON [   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-1\",     \"title\": \"Request for test site 1\",   },   {     \"message\": \"Please can you add me\",     \"id\": \"test-site-2\",     \"title\": \"Request for test site 2\",   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "site" : {
      "role" : "SiteConsumer",
      "visibility" : "PRIVATE",
      "guid" : "guid",
      "description" : "description",
      "id" : "id",
      "preset" : "preset",
      "title" : "title"
    },
    "id" : "id",
    "message" : "message"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteMembershipRequestBodyCreate: (body) Site membership request details 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMembershipRequestEntry> 
     */
    open class func createSiteMembershipRequestForPersonWithRequestBuilder(personId: String, siteMembershipRequestBodyCreate: SiteMembershipRequestBodyCreate, fields: [String]? = nil) -> RequestBuilder<SiteMembershipRequestEntry> {
        var path = "/alfresco/versions/1/people/{personId}/site-membership-requests"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipRequestBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMembershipRequestEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a site
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter permanent: (query) Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSite(siteId: String, permanent: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSiteWithRequestBuilder(siteId: siteId, permanent: permanent).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a site
     - DELETE /alfresco/versions/1/sites/{siteId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the site with **siteId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter permanent: (query) Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSiteWithRequestBuilder(siteId: String, permanent: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/sites/{siteId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "permanent": permanent
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a site membership
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteMembership(siteId: String, personId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSiteMembershipWithRequestBuilder(siteId: siteId, personId: personId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a site membership
     - DELETE /alfresco/versions/1/sites/{siteId}/members/{personId}
     - Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSiteMembershipWithRequestBuilder(siteId: String, personId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/sites/{siteId}/members/{personId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a site membership
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteMembershipForPerson(personId: String, siteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSiteMembershipForPersonWithRequestBuilder(personId: personId, siteId: siteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a site membership
     - DELETE /alfresco/versions/1/people/{personId}/sites/{siteId}
     - Deletes person **personId** as a member of site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSiteMembershipForPersonWithRequestBuilder(personId: String, siteId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/sites/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a site membership request
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSiteMembershipRequestForPerson(personId: String, siteId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSiteMembershipRequestForPersonWithRequestBuilder(personId: personId, siteId: siteId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a site membership request
     - DELETE /alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}
     - Deletes the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSiteMembershipRequestForPersonWithRequestBuilder(personId: String, siteId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a site
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSite(siteId: String, relations: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteEntry?,_ error: Error?) -> Void)) {
        getSiteWithRequestBuilder(siteId: siteId, relations: relations, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a site
     - GET /alfresco/versions/1/sites/{siteId}
     - Gets information for site **siteId**.  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to the site **siteId**:  ``` containers,members ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "visibility" : "PRIVATE",
    "guid" : "guid",
    "description" : "description",
    "id" : "id",
    "preset" : "preset",
    "title" : "title"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteEntry> 
     */
    open class func getSiteWithRequestBuilder(siteId: String, relations: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<SiteEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "relations": relations, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a site container
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter containerId: (path) The unique identifier of a site container. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSiteContainer(siteId: String, containerId: String, fields: [String]? = nil, completion: @escaping ((_ data: SiteContainerEntry?,_ error: Error?) -> Void)) {
        getSiteContainerWithRequestBuilder(siteId: siteId, containerId: containerId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a site container
     - GET /alfresco/versions/1/sites/{siteId}/containers/{containerId}
     - Gets information on the container **containerId** in site **siteId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id",
    "folderId" : "folderId"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter containerId: (path) The unique identifier of a site container. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteContainerEntry> 
     */
    open class func getSiteContainerWithRequestBuilder(siteId: String, containerId: String, fields: [String]? = nil) -> RequestBuilder<SiteContainerEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}/containers/{containerId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let containerIdPreEscape = "\(containerId)"
        let containerIdPostEscape = containerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{containerId}", with: containerIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteContainerEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a site membership
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSiteMembership(siteId: String, personId: String, fields: [String]? = nil, completion: @escaping ((_ data: SiteMemberEntry?,_ error: Error?) -> Void)) {
        getSiteMembershipWithRequestBuilder(siteId: siteId, personId: personId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a site membership
     - GET /alfresco/versions/1/sites/{siteId}/members/{personId}
     - Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "person" : {
      "googleId" : "googleId",
      "lastName" : "lastName",
      "userStatus" : "userStatus",
      "capabilities" : "{}",
      "displayName" : "displayName",
      "jobTitle" : "jobTitle",
      "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
      "mobile" : "mobile",
      "emailNotificationsEnabled" : true,
      "description" : "description",
      "telephone" : "telephone",
      "enabled" : true,
      "aspectNames" : [ "aspectNames", "aspectNames" ],
      "firstName" : "firstName",
      "skypeId" : "skypeId",
      "avatarId" : "avatarId",
      "instantMessageId" : "instantMessageId",
      "location" : "location",
      "company" : {
        "address3" : "address3",
        "address2" : "address2",
        "address1" : "address1",
        "organization" : "organization",
        "postcode" : "postcode",
        "telephone" : "telephone",
        "fax" : "fax",
        "email" : "email"
      },
      "id" : "id",
      "email" : "email",
      "properties" : "{}"
    },
    "id" : "id"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMemberEntry> 
     */
    open class func getSiteMembershipWithRequestBuilder(siteId: String, personId: String, fields: [String]? = nil) -> RequestBuilder<SiteMemberEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}/members/{personId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMemberEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a site membership
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSiteMembershipForPerson(personId: String, siteId: String, completion: @escaping ((_ data: SiteRoleEntry?,_ error: Error?) -> Void)) {
        getSiteMembershipForPersonWithRequestBuilder(personId: personId, siteId: siteId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a site membership
     - GET /alfresco/versions/1/people/{personId}/sites/{siteId}
     - Gets site membership information for person **personId** on site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "site" : {
      "role" : "SiteConsumer",
      "visibility" : "PRIVATE",
      "guid" : "guid",
      "description" : "description",
      "id" : "id",
      "preset" : "preset",
      "title" : "title"
    },
    "role" : "SiteConsumer",
    "guid" : "guid",
    "id" : "id"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 

     - returns: RequestBuilder<SiteRoleEntry> 
     */
    open class func getSiteMembershipForPersonWithRequestBuilder(personId: String, siteId: String) -> RequestBuilder<SiteRoleEntry> {
        var path = "/alfresco/versions/1/people/{personId}/sites/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SiteRoleEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a site membership request
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSiteMembershipRequestForPerson(personId: String, siteId: String, fields: [String]? = nil, completion: @escaping ((_ data: SiteMembershipRequestEntry?,_ error: Error?) -> Void)) {
        getSiteMembershipRequestForPersonWithRequestBuilder(personId: personId, siteId: siteId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a site membership request
     - GET /alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}
     - Gets the site membership request for site **siteId** for person **personId**, if one exists.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "site" : {
      "role" : "SiteConsumer",
      "visibility" : "PRIVATE",
      "guid" : "guid",
      "description" : "description",
      "id" : "id",
      "preset" : "preset",
      "title" : "title"
    },
    "id" : "id",
    "message" : "message"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMembershipRequestEntry> 
     */
    open class func getSiteMembershipRequestForPersonWithRequestBuilder(personId: String, siteId: String, fields: [String]? = nil) -> RequestBuilder<SiteMembershipRequestEntry> {
        var path = "/alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMembershipRequestEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get site membership requests
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSiteMembershipRequests(skipCount: Int? = nil, maxItems: Int? = nil, _where: String? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteMembershipRequestWithPersonPaging?,_ error: Error?) -> Void)) {
        getSiteMembershipRequestsWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, _where: _where, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get site membership requests
     - GET /alfresco/versions/1/site-membership-requests
     - Get the list of site membership requests the user can action.  You can use the **where** parameter to filter the returned site membership requests by **siteId**. For example:  ``` (siteId=mySite) ```  The **where** parameter can also be used to filter by ***personId***. For example:  ``` where=(personId=person) ```  This may be combined with the siteId filter, as shown below:  ``` where=(siteId=mySite AND personId=person)) ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "person" : {
          "googleId" : "googleId",
          "lastName" : "lastName",
          "userStatus" : "userStatus",
          "capabilities" : "{}",
          "displayName" : "displayName",
          "jobTitle" : "jobTitle",
          "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
          "mobile" : "mobile",
          "emailNotificationsEnabled" : true,
          "description" : "description",
          "telephone" : "telephone",
          "enabled" : true,
          "aspectNames" : [ "aspectNames", "aspectNames" ],
          "firstName" : "firstName",
          "skypeId" : "skypeId",
          "avatarId" : "avatarId",
          "instantMessageId" : "instantMessageId",
          "location" : "location",
          "company" : {
            "address3" : "address3",
            "address2" : "address2",
            "address1" : "address1",
            "organization" : "organization",
            "postcode" : "postcode",
            "telephone" : "telephone",
            "fax" : "fax",
            "email" : "email"
          },
          "id" : "id",
          "email" : "email",
          "properties" : "{}"
        },
        "id" : "id",
        "message" : "message"
      }
    }, {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "person" : {
          "googleId" : "googleId",
          "lastName" : "lastName",
          "userStatus" : "userStatus",
          "capabilities" : "{}",
          "displayName" : "displayName",
          "jobTitle" : "jobTitle",
          "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
          "mobile" : "mobile",
          "emailNotificationsEnabled" : true,
          "description" : "description",
          "telephone" : "telephone",
          "enabled" : true,
          "aspectNames" : [ "aspectNames", "aspectNames" ],
          "firstName" : "firstName",
          "skypeId" : "skypeId",
          "avatarId" : "avatarId",
          "instantMessageId" : "instantMessageId",
          "location" : "location",
          "company" : {
            "address3" : "address3",
            "address2" : "address2",
            "address1" : "address1",
            "organization" : "organization",
            "postcode" : "postcode",
            "telephone" : "telephone",
            "fax" : "fax",
            "email" : "email"
          },
          "id" : "id",
          "email" : "email",
          "properties" : "{}"
        },
        "id" : "id",
        "message" : "message"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMembershipRequestWithPersonPaging> 
     */
    open class func getSiteMembershipRequestsWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, _where: String? = nil, fields: [String]? = nil) -> RequestBuilder<SiteMembershipRequestWithPersonPaging> {
        let path = "/alfresco/versions/1/site-membership-requests"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "where": _where, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMembershipRequestWithPersonPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List site containers
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSiteContainers(siteId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteContainerPaging?,_ error: Error?) -> Void)) {
        listSiteContainersWithRequestBuilder(siteId: siteId, skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List site containers
     - GET /alfresco/versions/1/sites/{siteId}/containers
     - Gets a list of containers for the site **siteId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "id" : "id",
        "folderId" : "folderId"
      }
    }, {
      "entry" : {
        "id" : "id",
        "folderId" : "folderId"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteContainerPaging> 
     */
    open class func listSiteContainersWithRequestBuilder(siteId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<SiteContainerPaging> {
        var path = "/alfresco/versions/1/sites/{siteId}/containers"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteContainerPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List site membership requests
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSiteMembershipRequestsForPerson(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteMembershipRequestPaging?,_ error: Error?) -> Void)) {
        listSiteMembershipRequestsForPersonWithRequestBuilder(personId: personId, skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List site membership requests
     - GET /alfresco/versions/1/people/{personId}/site-membership-requests
     - Gets a list of the current site membership requests for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "id" : "id",
        "message" : "message"
      }
    }, {
      "entry" : {
        "createdAt" : "2000-01-23T04:56:07.000+00:00",
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "id" : "id",
        "message" : "message"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMembershipRequestPaging> 
     */
    open class func listSiteMembershipRequestsForPersonWithRequestBuilder(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<SiteMembershipRequestPaging> {
        var path = "/alfresco/versions/1/people/{personId}/site-membership-requests"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMembershipRequestPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List site memberships
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSiteMemberships(siteId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SiteMemberPaging?,_ error: Error?) -> Void)) {
        listSiteMembershipsWithRequestBuilder(siteId: siteId, skipCount: skipCount, maxItems: maxItems, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List site memberships
     - GET /alfresco/versions/1/sites/{siteId}/members
     - Gets a list of site memberships for site **siteId**.
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "role" : "SiteConsumer",
        "person" : {
          "googleId" : "googleId",
          "lastName" : "lastName",
          "userStatus" : "userStatus",
          "capabilities" : "{}",
          "displayName" : "displayName",
          "jobTitle" : "jobTitle",
          "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
          "mobile" : "mobile",
          "emailNotificationsEnabled" : true,
          "description" : "description",
          "telephone" : "telephone",
          "enabled" : true,
          "aspectNames" : [ "aspectNames", "aspectNames" ],
          "firstName" : "firstName",
          "skypeId" : "skypeId",
          "avatarId" : "avatarId",
          "instantMessageId" : "instantMessageId",
          "location" : "location",
          "company" : {
            "address3" : "address3",
            "address2" : "address2",
            "address1" : "address1",
            "organization" : "organization",
            "postcode" : "postcode",
            "telephone" : "telephone",
            "fax" : "fax",
            "email" : "email"
          },
          "id" : "id",
          "email" : "email",
          "properties" : "{}"
        },
        "id" : "id"
      }
    }, {
      "entry" : {
        "role" : "SiteConsumer",
        "person" : {
          "googleId" : "googleId",
          "lastName" : "lastName",
          "userStatus" : "userStatus",
          "capabilities" : "{}",
          "displayName" : "displayName",
          "jobTitle" : "jobTitle",
          "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
          "mobile" : "mobile",
          "emailNotificationsEnabled" : true,
          "description" : "description",
          "telephone" : "telephone",
          "enabled" : true,
          "aspectNames" : [ "aspectNames", "aspectNames" ],
          "firstName" : "firstName",
          "skypeId" : "skypeId",
          "avatarId" : "avatarId",
          "instantMessageId" : "instantMessageId",
          "location" : "location",
          "company" : {
            "address3" : "address3",
            "address2" : "address2",
            "address1" : "address1",
            "organization" : "organization",
            "postcode" : "postcode",
            "telephone" : "telephone",
            "fax" : "fax",
            "email" : "email"
          },
          "id" : "id",
          "email" : "email",
          "properties" : "{}"
        },
        "id" : "id"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMemberPaging> 
     */
    open class func listSiteMembershipsWithRequestBuilder(siteId: String, skipCount: Int? = nil, maxItems: Int? = nil, fields: [String]? = nil) -> RequestBuilder<SiteMemberPaging> {
        var path = "/alfresco/versions/1/sites/{siteId}/members"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMemberPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List site memberships
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSiteMembershipsForPerson(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, relations: [String]? = nil, fields: [String]? = nil, _where: String? = nil, completion: @escaping ((_ data: SiteRolePaging?,_ error: Error?) -> Void)) {
        listSiteMembershipsForPersonWithRequestBuilder(personId: personId, skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, relations: relations, fields: fields, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List site memberships
     - GET /alfresco/versions/1/people/{personId}/sites
     - Gets a list of site membership information for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * role 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "role" : "SiteConsumer",
        "guid" : "guid",
        "id" : "id"
      }
    }, {
      "entry" : {
        "site" : {
          "role" : "SiteConsumer",
          "visibility" : "PRIVATE",
          "guid" : "guid",
          "description" : "description",
          "id" : "id",
          "preset" : "preset",
          "title" : "title"
        },
        "role" : "SiteConsumer",
        "guid" : "guid",
        "id" : "id"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)

     - returns: RequestBuilder<SiteRolePaging> 
     */
    open class func listSiteMembershipsForPersonWithRequestBuilder(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, relations: [String]? = nil, fields: [String]? = nil, _where: String? = nil) -> RequestBuilder<SiteRolePaging> {
        var path = "/alfresco/versions/1/people/{personId}/sites"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "relations": relations, 
            "fields": fields, 
            "where": _where
        ])

        let requestBuilder: RequestBuilder<SiteRolePaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List sites
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSites(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, relations: [String]? = nil, fields: [String]? = nil, _where: String? = nil, completion: @escaping ((_ data: SitePaging?,_ error: Error?) -> Void)) {
        listSitesWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, relations: relations, fields: fields, _where: _where).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List sites
     - GET /alfresco/versions/1/sites
     - Gets a list of sites in this repository.  You can use the **where** parameter to filter the returned sites by **visibility** or site **preset**.  Example to filter by **visibility**, use any one of:  ``` (visibility='PRIVATE') (visibility='PUBLIC') (visibility='MODERATED') ```  Example to filter by site **preset**:  ``` (preset='site-dashboard') ```  The default sort order for the returned list is for sites to be sorted by ascending title. You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter: * id * title * description  You can use the **relations** parameter to include one or more related entities in a single response and so reduce network traffic.  The entity types in Alfresco are organized in a tree structure. The **sites** entity has two children, **containers** and **members**. The following relations parameter returns all the container and member objects related to each site:  ``` containers,members ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      }
    }, {
      "entry" : {
        "role" : "SiteConsumer",
        "visibility" : "PRIVATE",
        "guid" : "guid",
        "description" : "description",
        "id" : "id",
        "preset" : "preset",
        "title" : "title"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list.  If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter relations: (query) Use the relations parameter to include one or more related entities in a single response. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)

     - returns: RequestBuilder<SitePaging> 
     */
    open class func listSitesWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, relations: [String]? = nil, fields: [String]? = nil, _where: String? = nil) -> RequestBuilder<SitePaging> {
        let path = "/alfresco/versions/1/sites"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "relations": relations, 
            "fields": fields, 
            "where": _where
        ])

        let requestBuilder: RequestBuilder<SitePaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reject a site membership request
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter inviteeId: (path) The invitee user name. 
     - parameter siteMembershipRejectionBody: (body) Rejecting a request to join, optionally, allows the inclusion of comment.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectSiteMembershipRequest(siteId: String, inviteeId: String, siteMembershipRejectionBody: SiteMembershipRejectionBody? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rejectSiteMembershipRequestWithRequestBuilder(siteId: siteId, inviteeId: inviteeId, siteMembershipRejectionBody: siteMembershipRejectionBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reject a site membership request
     - POST /alfresco/versions/1/sites/{siteId}/site-membership-requests/{inviteeId}/reject
     - Reject a site membership request. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter inviteeId: (path) The invitee user name. 
     - parameter siteMembershipRejectionBody: (body) Rejecting a request to join, optionally, allows the inclusion of comment.  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func rejectSiteMembershipRequestWithRequestBuilder(siteId: String, inviteeId: String, siteMembershipRejectionBody: SiteMembershipRejectionBody? = nil) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/sites/{siteId}/site-membership-requests/{inviteeId}/reject"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let inviteeIdPreEscape = "\(inviteeId)"
        let inviteeIdPostEscape = inviteeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{inviteeId}", with: inviteeIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipRejectionBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a site
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteBodyUpdate: (body) The site information to update. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSite(siteId: String, siteBodyUpdate: SiteBodyUpdate, fields: [String]? = nil, completion: @escaping ((_ data: SiteEntry?,_ error: Error?) -> Void)) {
        updateSiteWithRequestBuilder(siteId: siteId, siteBodyUpdate: siteBodyUpdate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a site
     - PUT /alfresco/versions/1/sites/{siteId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Update the details for the given site **siteId**. Site Manager or otherwise a  (site) admin can update title, description or visibility.  Note: the id of a site cannot be updated once the site has been created. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "visibility" : "PRIVATE",
    "guid" : "guid",
    "description" : "description",
    "id" : "id",
    "preset" : "preset",
    "title" : "title"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteBodyUpdate: (body) The site information to update. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteEntry> 
     */
    open class func updateSiteWithRequestBuilder(siteId: String, siteBodyUpdate: SiteBodyUpdate, fields: [String]? = nil) -> RequestBuilder<SiteEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a site membership
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 
     - parameter siteMembershipBodyUpdate: (body) The persons new role 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSiteMembership(siteId: String, personId: String, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, fields: [String]? = nil, completion: @escaping ((_ data: SiteMemberEntry?,_ error: Error?) -> Void)) {
        updateSiteMembershipWithRequestBuilder(siteId: siteId, personId: personId, siteMembershipBodyUpdate: siteMembershipBodyUpdate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a site membership
     - PUT /alfresco/versions/1/sites/{siteId}/members/{personId}
     - Update the membership of person **personId** in site **siteId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.  You can set the **role** to one of four types:  * SiteConsumer * SiteCollaborator * SiteContributor * SiteManager 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "role" : "SiteConsumer",
    "person" : {
      "googleId" : "googleId",
      "lastName" : "lastName",
      "userStatus" : "userStatus",
      "capabilities" : "{}",
      "displayName" : "displayName",
      "jobTitle" : "jobTitle",
      "statusUpdatedAt" : "2000-01-23T04:56:07.000+00:00",
      "mobile" : "mobile",
      "emailNotificationsEnabled" : true,
      "description" : "description",
      "telephone" : "telephone",
      "enabled" : true,
      "aspectNames" : [ "aspectNames", "aspectNames" ],
      "firstName" : "firstName",
      "skypeId" : "skypeId",
      "avatarId" : "avatarId",
      "instantMessageId" : "instantMessageId",
      "location" : "location",
      "company" : {
        "address3" : "address3",
        "address2" : "address2",
        "address1" : "address1",
        "organization" : "organization",
        "postcode" : "postcode",
        "telephone" : "telephone",
        "fax" : "fax",
        "email" : "email"
      },
      "id" : "id",
      "email" : "email",
      "properties" : "{}"
    },
    "id" : "id"
  }
}}]
     
     - parameter siteId: (path) The identifier of a site. 
     - parameter personId: (path) The identifier of a person. 
     - parameter siteMembershipBodyUpdate: (body) The persons new role 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMemberEntry> 
     */
    open class func updateSiteMembershipWithRequestBuilder(siteId: String, personId: String, siteMembershipBodyUpdate: SiteMembershipBodyUpdate, fields: [String]? = nil) -> RequestBuilder<SiteMemberEntry> {
        var path = "/alfresco/versions/1/sites/{siteId}/members/{personId}"
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMemberEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a site membership request
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteMembershipRequestBodyUpdate: (body) The new message to display 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSiteMembershipRequestForPerson(personId: String, siteId: String, siteMembershipRequestBodyUpdate: SiteMembershipRequestBodyUpdate, fields: [String]? = nil, completion: @escaping ((_ data: SiteMembershipRequestEntry?,_ error: Error?) -> Void)) {
        updateSiteMembershipRequestForPersonWithRequestBuilder(personId: personId, siteId: siteId, siteMembershipRequestBodyUpdate: siteMembershipRequestBodyUpdate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a site membership request
     - PUT /alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}
     - Updates the message for the site membership request to site **siteId** for person **personId**.  You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "site" : {
      "role" : "SiteConsumer",
      "visibility" : "PRIVATE",
      "guid" : "guid",
      "description" : "description",
      "id" : "id",
      "preset" : "preset",
      "title" : "title"
    },
    "id" : "id",
    "message" : "message"
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter siteId: (path) The identifier of a site. 
     - parameter siteMembershipRequestBodyUpdate: (body) The new message to display 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SiteMembershipRequestEntry> 
     */
    open class func updateSiteMembershipRequestForPersonWithRequestBuilder(personId: String, siteId: String, siteMembershipRequestBodyUpdate: SiteMembershipRequestBodyUpdate, fields: [String]? = nil) -> RequestBuilder<SiteMembershipRequestEntry> {
        var path = "/alfresco/versions/1/people/{personId}/site-membership-requests/{siteId}"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let siteIdPreEscape = "\(siteId)"
        let siteIdPostEscape = siteIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{siteId}", with: siteIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: siteMembershipRequestBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SiteMembershipRequestEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
