//
// DownloadsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DownloadsAPI {
    /**
     Cancel a download
     
     - parameter downloadId: (path) The identifier of a download node. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelDownload(downloadId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelDownloadWithRequestBuilder(downloadId: downloadId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancel a download
     - DELETE /alfresco/versions/1/downloads/{downloadId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Cancels the creation of a download request.  **Note:** The download node can be deleted using the **DELETE /nodes/{downloadId}** endpoint  By default, if the download node is not deleted it will be picked up by a cleaner job which removes download nodes older than a configurable amount of time (default is 1 hour)  Information about the existing progress at the time of cancelling can be retrieved by calling the **GET /downloads/{downloadId}** endpoint  The cancel operation is done asynchronously. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter downloadId: (path) The identifier of a download node. 

     - returns: RequestBuilder<Void> 
     */
    open class func cancelDownloadWithRequestBuilder(downloadId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/downloads/{downloadId}"
        let downloadIdPreEscape = "\(downloadId)"
        let downloadIdPostEscape = downloadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{downloadId}", with: downloadIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new download
     
     - parameter downloadBodyCreate: (body) The nodeIds the content of which will be zipped, which zip will be set as the content of our download node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDownload(downloadBodyCreate: DownloadBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: DownloadEntry?,_ error: Error?) -> Void)) {
        createDownloadWithRequestBuilder(downloadBodyCreate: downloadBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new download
     - POST /alfresco/versions/1/downloads
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Creates a new download node asynchronously, the content of which will be the zipped content of the **nodeIds** specified in the JSON body like this:  ```JSON {     \"nodeIds\":      [        \"c8bb482a-ff3c-4704-a3a3-de1c83ccd84c\",        \"cffa62db-aa01-493d-9594-058bc058eeb1\"      ] } ```  **Note:** The content of the download node can be obtained using the **GET /nodes/{downloadId}/content** endpoint 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "filesAdded" : 0,
    "bytesAdded" : 6,
    "totalBytes" : 5,
    "id" : "id",
    "totalFiles" : 1,
    "status" : "PENDING"
  }
}}]
     
     - parameter downloadBodyCreate: (body) The nodeIds the content of which will be zipped, which zip will be set as the content of our download node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<DownloadEntry> 
     */
    open class func createDownloadWithRequestBuilder(downloadBodyCreate: DownloadBodyCreate, fields: [String]? = nil) -> RequestBuilder<DownloadEntry> {
        let path = "/alfresco/versions/1/downloads"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: downloadBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<DownloadEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a download
     
     - parameter downloadId: (path) The identifier of a download node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDownload(downloadId: String, fields: [String]? = nil, completion: @escaping ((_ data: DownloadEntry?,_ error: Error?) -> Void)) {
        getDownloadWithRequestBuilder(downloadId: downloadId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a download
     - GET /alfresco/versions/1/downloads/{downloadId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Retrieve status information for download node **downloadId** 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "filesAdded" : 0,
    "bytesAdded" : 6,
    "totalBytes" : 5,
    "id" : "id",
    "totalFiles" : 1,
    "status" : "PENDING"
  }
}}]
     
     - parameter downloadId: (path) The identifier of a download node. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<DownloadEntry> 
     */
    open class func getDownloadWithRequestBuilder(downloadId: String, fields: [String]? = nil) -> RequestBuilder<DownloadEntry> {
        var path = "/alfresco/versions/1/downloads/{downloadId}"
        let downloadIdPreEscape = "\(downloadId)"
        let downloadIdPostEscape = downloadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{downloadId}", with: downloadIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<DownloadEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
