//
// GroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GroupsAPI {
    /**
     Create a group
     
     - parameter groupBodyCreate: (body) The group to create. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroup(groupBodyCreate: GroupBodyCreate, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupEntry?,_ error: Error?) -> Void)) {
        createGroupWithRequestBuilder(groupBodyCreate: groupBodyCreate, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a group
     - POST /alfresco/versions/1/groups
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Create a group.  The group id must start with \"GROUP\\_\". If this is omitted it will be added automatically. This format is also returned when listing groups or group memberships. It should be noted that the other group-related operations also expect the id to start with \"GROUP\\_\".  If one or more parentIds are specified then the group will be created and become a member of each of the specified parent groups.  If no parentIds are specified then the group will be created as a root group.  The group will be created in the **APP.DEFAULT** and **AUTH.ALF** zones.  You must have admin rights to create a group. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "isRoot" : true,
    "displayName" : "displayName",
    "parentIds" : [ "parentIds", "parentIds" ],
    "id" : "id",
    "zones" : [ "zones", "zones" ]
  }
}}]
     
     - parameter groupBodyCreate: (body) The group to create. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupEntry> 
     */
    open class func createGroupWithRequestBuilder(groupBodyCreate: GroupBodyCreate, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<GroupEntry> {
        let path = "/alfresco/versions/1/groups"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a group membership
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupMembershipBodyCreate: (body) The group membership to add (person or sub-group). 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupMembership(groupId: String, groupMembershipBodyCreate: GroupMembershipBodyCreate, fields: [String]? = nil, completion: @escaping ((_ data: GroupMemberEntry?,_ error: Error?) -> Void)) {
        createGroupMembershipWithRequestBuilder(groupId: groupId, groupMembershipBodyCreate: groupMembershipBodyCreate, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a group membership
     - POST /alfresco/versions/1/groups/{groupId}/members
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Create a group membership (for an existing person or group) within a group **groupId**.  If the added group was previously a root group then it becomes a non-root group since it now has a parent.  It is an error to specify an **id** that does not exist.  You must have admin rights to create a group membership. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "displayName" : "displayName",
    "id" : "id",
    "memberType" : "GROUP"
  }
}}]
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupMembershipBodyCreate: (body) The group membership to add (person or sub-group). 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupMemberEntry> 
     */
    open class func createGroupMembershipWithRequestBuilder(groupId: String, groupMembershipBodyCreate: GroupMembershipBodyCreate, fields: [String]? = nil) -> RequestBuilder<GroupMemberEntry> {
        var path = "/alfresco/versions/1/groups/{groupId}/members"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupMembershipBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupMemberEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a group
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter cascade: (query) If **true** then the delete will be applied in cascade to sub-groups.  (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(groupId: String, cascade: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteGroupWithRequestBuilder(groupId: groupId, cascade: cascade).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a group
     - DELETE /alfresco/versions/1/groups/{groupId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Delete group **groupId**.  The option to cascade delete applies this recursively to any hierarchy of group members. In this case, removing a group member does not delete the person or sub-group itself. If a removed sub-group no longer has any parent groups then it becomes a root group.  You must have admin rights to delete a group. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter cascade: (query) If **true** then the delete will be applied in cascade to sub-groups.  (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(groupId: String, cascade: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "cascade": cascade
        ])

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a group membership
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupMemberId: (path) The identifier of a person or group. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroupMembership(groupId: String, groupMemberId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteGroupMembershipWithRequestBuilder(groupId: groupId, groupMemberId: groupMemberId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a group membership
     - DELETE /alfresco/versions/1/groups/{groupId}/members/{groupMemberId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Delete group member **groupMemberId** (person or sub-group) from group **groupId**.  Removing a group member does not delete the person or sub-group itself.  If a removed sub-group no longer has any parent groups then it becomes a root group.  You must have admin rights to delete a group membership. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupMemberId: (path) The identifier of a person or group. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupMembershipWithRequestBuilder(groupId: String, groupMemberId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/groups/{groupId}/members/{groupMemberId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let groupMemberIdPreEscape = "\(groupMemberId)"
        let groupMemberIdPostEscape = groupMemberIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupMemberId}", with: groupMemberIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get group details
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroup(groupId: String, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupEntry?,_ error: Error?) -> Void)) {
        getGroupWithRequestBuilder(groupId: groupId, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get group details
     - GET /alfresco/versions/1/groups/{groupId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Get details for group **groupId**.  You can use the **include** parameter to return additional information. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "isRoot" : true,
    "displayName" : "displayName",
    "parentIds" : [ "parentIds", "parentIds" ],
    "id" : "id",
    "zones" : [ "zones", "zones" ]
  }
}}]
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupEntry> 
     */
    open class func getGroupWithRequestBuilder(groupId: String, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<GroupEntry> {
        var path = "/alfresco/versions/1/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List memberships of a group
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupMemberships(groupId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, _where: String? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupMemberPaging?,_ error: Error?) -> Void)) {
        listGroupMembershipsWithRequestBuilder(groupId: groupId, skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, _where: _where, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List memberships of a group
     - GET /alfresco/versions/1/groups/{groupId}/members
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Gets a list of the group memberships for the group **groupId**.  You can use the **where** parameter to filter the returned groups by **memberType**.  Example to filter by **memberType**, use any one of:  ``` (memberType='GROUP') (memberType='PERSON') ```  The default sort order for the returned list is for group members to be sorted by ascending displayName. You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter: * id * displayName 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "displayName" : "displayName",
        "id" : "id",
        "memberType" : "GROUP"
      }
    }, {
      "entry" : {
        "displayName" : "displayName",
        "id" : "id",
        "memberType" : "GROUP"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupMemberPaging> 
     */
    open class func listGroupMembershipsWithRequestBuilder(groupId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, _where: String? = nil, fields: [String]? = nil) -> RequestBuilder<GroupMemberPaging> {
        var path = "/alfresco/versions/1/groups/{groupId}/members"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "where": _where, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupMemberPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List group memberships
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroupMembershipsForPerson(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, _where: String? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupPaging?,_ error: Error?) -> Void)) {
        listGroupMembershipsForPersonWithRequestBuilder(personId: personId, skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, include: include, _where: _where, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List group memberships
     - GET /alfresco/versions/1/people/{personId}/groups
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.   Gets a list of group membership information for person **personId**.   You can use the `-me-` string in place of `<personId>` to specify the currently authenticated user.   You can use the **include** parameter to return additional information.   You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where**  clause will return just the root groups:   ```  (isRoot=true)  ```   The **where** parameter can also be used to filter by ***zone***. This may be combined with isRoot to narrow  a result set even further. For example, the following where clause will only return groups belonging to the  `MY.ZONE` zone.   ```  where=(zones in ('MY.ZONE'))  ```   This may be combined with the isRoot filter, as shown below:   ```  where=(isRoot=false AND zones in ('MY.ZONE'))  ```   ***Note:*** restrictions include  * `AND` is the only supported operator when combining `isRoot` and `zones` filters  * Only one zone is supported by the filter  * The quoted zone name must be placed in parenthesis — a 400 error will result if these are omitted.    The default sort order for the returned list is for groups to be sorted by ascending displayName.  You can override the default by using the **orderBy** parameter. You can specify one or more of the following fields in the **orderBy** parameter:  * id  * displayName 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "isRoot" : true,
        "displayName" : "displayName",
        "parentIds" : [ "parentIds", "parentIds" ],
        "id" : "id",
        "zones" : [ "zones", "zones" ]
      }
    }, {
      "entry" : {
        "isRoot" : true,
        "displayName" : "displayName",
        "parentIds" : [ "parentIds", "parentIds" ],
        "id" : "id",
        "zones" : [ "zones", "zones" ]
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter personId: (path) The identifier of a person. 
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupPaging> 
     */
    open class func listGroupMembershipsForPersonWithRequestBuilder(personId: String, skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, _where: String? = nil, fields: [String]? = nil) -> RequestBuilder<GroupPaging> {
        var path = "/alfresco/versions/1/people/{personId}/groups"
        let personIdPreEscape = "\(personId)"
        let personIdPostEscape = personIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{personId}", with: personIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "include": include, 
            "where": _where, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List groups
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGroups(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, _where: String? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupPaging?,_ error: Error?) -> Void)) {
        listGroupsWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, orderBy: orderBy, include: include, _where: _where, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List groups
     - GET /alfresco/versions/1/groups
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Gets a list of groups.  You can use the **include** parameter to return additional information.  You can use the **where** parameter to filter the returned groups by **isRoot**. For example, the following **where** clause will return just the root groups:  ``` (isRoot=true) ```  The **where** parameter can also be used to filter by ***zone*** and ***displayName***. They may be combined with isRoot to narrow a result set even further.  For example, the following where clause will only return groups belonging to the `MY.ZONE` zone.  ``` where=(zones in ('MY.ZONE')) ```  This may be combined with the isRoot filter, as shown below:  ``` where=(isRoot=false AND zones in ('MY.ZONE')) ``` The following where clause will only return groups with displayName `MY.GROUP.NAME`.   ``` where=(displayName in ('MY.GROUP.NAME')) ``` This may be combined with the isRoot and zones filter, as shown below:  ``` where=(isRoot=false AND displayName in ('MY.GROUP.NAME')) ```  ``` where=(zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME')) ```  ``` where=(isRoot=false AND zones in ('MY.ZONE') AND displayName in ('MY.GROUP.NAME')) ```  ***Note:*** restrictions include * `AND` is the only supported operator when combining `isRoot`, `zones` and `displayName` filters * Only one zone is supported by the filter * Only one displayName is supported by the filter * The quoted zone name and displayName must be placed in parenthesis — a 400 error will result if these are omitted.  The default sort order for the returned list is for groups to be sorted by ascending displayName. You can override the default by using the **orderBy** parameter. You can specify one of the following fields in the **orderBy** parameter: * id * displayName 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "isRoot" : true,
        "displayName" : "displayName",
        "parentIds" : [ "parentIds", "parentIds" ],
        "id" : "id",
        "zones" : [ "zones", "zones" ]
      }
    }, {
      "entry" : {
        "isRoot" : true,
        "displayName" : "displayName",
        "parentIds" : [ "parentIds", "parentIds" ],
        "id" : "id",
        "zones" : [ "zones", "zones" ]
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter orderBy: (query) A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field.  (optional)
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter _where: (query) A string to restrict the returned objects by using a predicate. (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupPaging> 
     */
    open class func listGroupsWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, orderBy: [String]? = nil, include: [String]? = nil, _where: String? = nil, fields: [String]? = nil) -> RequestBuilder<GroupPaging> {
        let path = "/alfresco/versions/1/groups"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "orderBy": orderBy, 
            "include": include, 
            "where": _where, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update group details
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupBodyUpdate: (body) The group information to update. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGroup(groupId: String, groupBodyUpdate: GroupBodyUpdate, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: GroupEntry?,_ error: Error?) -> Void)) {
        updateGroupWithRequestBuilder(groupId: groupId, groupBodyUpdate: groupBodyUpdate, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update group details
     - PUT /alfresco/versions/1/groups/{groupId}
     - **Note:** this endpoint is available in Alfresco 5.2.1 and newer versions.  Update details (displayName) for group **groupId**.  You must have admin rights to update a group. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "isRoot" : true,
    "displayName" : "displayName",
    "parentIds" : [ "parentIds", "parentIds" ],
    "id" : "id",
    "zones" : [ "zones", "zones" ]
  }
}}]
     
     - parameter groupId: (path) The identifier of a group. 
     - parameter groupBodyUpdate: (body) The group information to update. 
     - parameter include: (query) Returns additional information about the group. The following optional fields can be requested: * parentIds * zones  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<GroupEntry> 
     */
    open class func updateGroupWithRequestBuilder(groupId: String, groupBodyUpdate: GroupBodyUpdate, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<GroupEntry> {
        var path = "/alfresco/versions/1/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupBodyUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<GroupEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
