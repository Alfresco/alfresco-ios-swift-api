//
// SharedLinksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SharedLinksAPI {
    /**
     Create a shared link to a file
     
     - parameter sharedLinkBodyCreate: (body) The nodeId to create a shared link for. 
     - parameter include: (query) Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createSharedLink(sharedLinkBodyCreate: SharedLinkBodyCreate, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SharedLinkEntry?,_ error: Error?) -> Void)) {
        createSharedLinkWithRequestBuilder(sharedLinkBodyCreate: sharedLinkBodyCreate, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a shared link to a file
     - POST /alfresco/versions/1/shared-links
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Create a shared link to the file **nodeId** in the request body. Also, an optional expiry date could be set, so the shared link would become invalid when the expiry date is reached. For example:  ```JSON   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-3333333333\",     \"expiresAt\": \"2017-03-23T23:00:00.000+0000\"   } ```  **Note:** You can create shared links to more than one file specifying a list of **nodeId**s in the JSON body like this:  ```JSON [   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-4444444444\"   },   {     \"nodeId\": \"1ff9da1a-ee2f-4b9c-8c34-5555555555\"   } ] ``` If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:  ```JSON {   \"list\": {     \"pagination\": {       \"count\": 2,       \"hasMoreItems\": false,       \"totalItems\": 2,       \"skipCount\": 0,       \"maxItems\": 100     },     \"entries\": [       {         \"entry\": {           ...         }       },       {         \"entry\": {           ...         }       }     ]   } } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "allowableOperationsOnTarget" : [ "allowableOperationsOnTarget", "allowableOperationsOnTarget" ],
    "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "title" : "title",
    "expiresAt" : "2000-01-23T04:56:07.000+00:00",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "path" : {
      "elements" : [ {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      }, {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      } ],
      "name" : "name",
      "isComplete" : true
    },
    "modifiedByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "name" : "name",
    "id" : "id",
    "nodeId" : "nodeId",
    "sharedByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
    "properties" : "{}",
    "isFavorite" : true
  }
}}]
     
     - parameter sharedLinkBodyCreate: (body) The nodeId to create a shared link for. 
     - parameter include: (query) Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SharedLinkEntry> 
     */
    open class func createSharedLinkWithRequestBuilder(sharedLinkBodyCreate: SharedLinkBodyCreate, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<SharedLinkEntry> {
        let path = "/alfresco/versions/1/shared-links"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharedLinkBodyCreate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SharedLinkEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Deletes a shared link
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSharedLink(sharedId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteSharedLinkWithRequestBuilder(sharedId: sharedId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes a shared link
     - DELETE /alfresco/versions/1/shared-links/{sharedId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Deletes the shared link with identifier **sharedId**. 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSharedLinkWithRequestBuilder(sharedId: String) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Email shared link
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter sharedLinkBodyEmail: (body) The shared link email to send. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailSharedLink(sharedId: String, sharedLinkBodyEmail: SharedLinkBodyEmail, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        emailSharedLinkWithRequestBuilder(sharedId: sharedId, sharedLinkBodyEmail: sharedLinkBodyEmail).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Email shared link
     - POST /alfresco/versions/1/shared-links/{sharedId}/email
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Sends email with app-specific url including identifier **sharedId**.  The client and recipientEmails properties are mandatory in the request body. For example, to email a shared link with minimum info: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"] } ``` A plain text message property can be optionally provided in the request body to customise the sent email. Also, a locale property can be optionally provided in the request body to send the emails in a particular language (if the locale is supported by Alfresco). For example, to email a shared link with a messages and a locale: ```JSON {     \"client\": \"myClient\",     \"recipientEmails\": [\"john.doe@acme.com\", \"joe.bloggs@acme.com\"],     \"message\": \"myMessage\",     \"locale\":\"en-GB\" } ``` **Note:** The client must be registered before you can send a shared link email. See [server documentation]. However, out-of-the-box  share is registered as a default client, so you could pass **share** as the client name: ```JSON {     \"client\": \"share\",     \"recipientEmails\": [\"john.doe@acme.com\"] } ``` 
     - BASIC:
       - type: basic
       - name: basicAuth
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter sharedLinkBodyEmail: (body) The shared link email to send. 

     - returns: RequestBuilder<Void> 
     */
    open class func emailSharedLinkWithRequestBuilder(sharedId: String, sharedLinkBodyEmail: SharedLinkBodyEmail) -> RequestBuilder<Void> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}/email"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharedLinkBodyEmail)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = AlfrescoContentAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a shared link
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSharedLink(sharedId: String, fields: [String]? = nil, completion: @escaping ((_ data: SharedLinkEntry?,_ error: Error?) -> Void)) {
        getSharedLinkWithRequestBuilder(sharedId: sharedId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a shared link
     - GET /alfresco/versions/1/shared-links/{sharedId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets minimal information for the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "allowableOperationsOnTarget" : [ "allowableOperationsOnTarget", "allowableOperationsOnTarget" ],
    "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
    "description" : "description",
    "title" : "title",
    "expiresAt" : "2000-01-23T04:56:07.000+00:00",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "aspectNames" : [ "aspectNames", "aspectNames" ],
    "path" : {
      "elements" : [ {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      }, {
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "name" : "name",
        "id" : "id",
        "nodeType" : "nodeType"
      } ],
      "name" : "name",
      "isComplete" : true
    },
    "modifiedByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "name" : "name",
    "id" : "id",
    "nodeId" : "nodeId",
    "sharedByUser" : {
      "displayName" : "displayName",
      "id" : "id"
    },
    "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
    "properties" : "{}",
    "isFavorite" : true
  }
}}]
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SharedLinkEntry> 
     */
    open class func getSharedLinkWithRequestBuilder(sharedId: String, fields: [String]? = nil) -> RequestBuilder<SharedLinkEntry> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SharedLinkEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get shared link content
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSharedLinkContent(sharedId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getSharedLinkContentWithRequestBuilder(sharedId: sharedId, attachment: attachment, ifModifiedSince: ifModifiedSince, range: range).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get shared link content
     - GET /alfresco/versions/1/shared-links/{sharedId}/content
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the content of the file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func getSharedLinkContentWithRequestBuilder(sharedId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil) -> RequestBuilder<Data> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}/content"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON(),
            "Range": range
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get shared link rendition information
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSharedLinkRendition(sharedId: String, renditionId: String, completion: @escaping ((_ data: RenditionEntry?,_ error: Error?) -> Void)) {
        getSharedLinkRenditionWithRequestBuilder(sharedId: sharedId, renditionId: renditionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get shared link rendition information
     - GET /alfresco/versions/1/shared-links/{sharedId}/renditions/{renditionId}
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "entry" : {
    "id" : "id",
    "content" : {
      "sizeInBytes" : 0,
      "mimeTypeName" : "mimeTypeName",
      "mimeTypeGroup" : "mimeTypeGroup",
      "mimeType" : "mimeType",
      "encoding" : "encoding"
    },
    "status" : "CREATED"
  }
}}]
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 

     - returns: RequestBuilder<RenditionEntry> 
     */
    open class func getSharedLinkRenditionWithRequestBuilder(sharedId: String, renditionId: String) -> RequestBuilder<RenditionEntry> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}/renditions/{renditionId}"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RenditionEntry>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get shared link rendition content
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSharedLinkRenditionContent(sharedId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil, completion: @escaping ((_ data: Data?,_ error: Error?) -> Void)) {
        getSharedLinkRenditionContentWithRequestBuilder(sharedId: sharedId, renditionId: renditionId, attachment: attachment, ifModifiedSince: ifModifiedSince, range: range).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get shared link rendition content
     - GET /alfresco/versions/1/shared-links/{sharedId}/renditions/{renditionId}/content
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets the rendition content for file with shared link identifier **sharedId**.  **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{output=none}]
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter renditionId: (path) The name of a thumbnail rendition, for example *doclib*, or *pdf*. 
     - parameter attachment: (query) **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response.  (optional, default to true)
     - parameter ifModifiedSince: (header) Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;.  (optional)
     - parameter range: (header) The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10.  (optional)

     - returns: RequestBuilder<Data> 
     */
    open class func getSharedLinkRenditionContentWithRequestBuilder(sharedId: String, renditionId: String, attachment: Bool? = nil, ifModifiedSince: Date? = nil, range: String? = nil) -> RequestBuilder<Data> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}/renditions/{renditionId}/content"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let renditionIdPreEscape = "\(renditionId)"
        let renditionIdPostEscape = renditionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{renditionId}", with: renditionIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "attachment": attachment
        ])
        let nillableHeaders: [String: Any?] = [
            "If-Modified-Since": ifModifiedSince?.encodeToJSON(),
            "Range": range
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Data>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     List renditions for a shared link
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSharedLinkRenditions(sharedId: String, completion: @escaping ((_ data: RenditionPaging?,_ error: Error?) -> Void)) {
        listSharedLinkRenditionsWithRequestBuilder(sharedId: sharedId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List renditions for a shared link
     - GET /alfresco/versions/1/shared-links/{sharedId}/renditions
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Gets a list of the rendition information for the file with shared link identifier **sharedId**.  This API method returns rendition information, including the rendition id, for each rendition where the rendition status is CREATED, which means the rendition is available to view/download.  **Note:** No authentication is required to call this endpoint. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    }, {
      "entry" : {
        "id" : "id",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "status" : "CREATED"
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter sharedId: (path) The identifier of a shared link to a file. 

     - returns: RequestBuilder<RenditionPaging> 
     */
    open class func listSharedLinkRenditionsWithRequestBuilder(sharedId: String) -> RequestBuilder<RenditionPaging> {
        var path = "/alfresco/versions/1/shared-links/{sharedId}/renditions"
        let sharedIdPreEscape = "\(sharedId)"
        let sharedIdPostEscape = sharedIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedId}", with: sharedIdPostEscape, options: .literal, range: nil)
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<RenditionPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List shared links
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSharedLinks(skipCount: Int? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil, completion: @escaping ((_ data: SharedLinkPaging?,_ error: Error?) -> Void)) {
        listSharedLinksWithRequestBuilder(skipCount: skipCount, maxItems: maxItems, _where: _where, include: include, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List shared links
     - GET /alfresco/versions/1/shared-links
     - **Note:** this endpoint is available in Alfresco 5.2 and newer versions.  Get a list of links that the current user has read permission on source node.  The list is ordered in descending modified order.  **Note:** The list of links is eventually consistent so newly created shared links may not appear immediately. 
     - BASIC:
       - type: basic
       - name: basicAuth
     - examples: [{contentType=application/json, example={
  "list" : {
    "entries" : [ {
      "entry" : {
        "allowableOperationsOnTarget" : [ "allowableOperationsOnTarget", "allowableOperationsOnTarget" ],
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "description" : "description",
        "title" : "title",
        "expiresAt" : "2000-01-23T04:56:07.000+00:00",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "nodeId" : "nodeId",
        "sharedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "properties" : "{}",
        "isFavorite" : true
      }
    }, {
      "entry" : {
        "allowableOperationsOnTarget" : [ "allowableOperationsOnTarget", "allowableOperationsOnTarget" ],
        "modifiedAt" : "2000-01-23T04:56:07.000+00:00",
        "description" : "description",
        "title" : "title",
        "expiresAt" : "2000-01-23T04:56:07.000+00:00",
        "content" : {
          "sizeInBytes" : 0,
          "mimeTypeName" : "mimeTypeName",
          "mimeTypeGroup" : "mimeTypeGroup",
          "mimeType" : "mimeType",
          "encoding" : "encoding"
        },
        "aspectNames" : [ "aspectNames", "aspectNames" ],
        "path" : {
          "elements" : [ {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          }, {
            "aspectNames" : [ "aspectNames", "aspectNames" ],
            "name" : "name",
            "id" : "id",
            "nodeType" : "nodeType"
          } ],
          "name" : "name",
          "isComplete" : true
        },
        "modifiedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "name" : "name",
        "id" : "id",
        "nodeId" : "nodeId",
        "sharedByUser" : {
          "displayName" : "displayName",
          "id" : "id"
        },
        "allowableOperations" : [ "allowableOperations", "allowableOperations" ],
        "properties" : "{}",
        "isFavorite" : true
      }
    } ],
    "pagination" : {
      "maxItems" : 5,
      "hasMoreItems" : true,
      "totalItems" : 6,
      "count" : 0,
      "skipCount" : 1
    }
  }
}}]
     
     - parameter skipCount: (query) The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0.  (optional, default to 0)
     - parameter maxItems: (query) The maximum number of items to return in the list. If not supplied then the default value is 100.  (optional, default to 100)
     - parameter _where: (query) Optionally filter the list by \&quot;sharedByUser\&quot; userid of person who shared the link (can also use -me-)  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(sharedByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  (optional)
     - parameter include: (query) Returns additional information about the shared link, the following optional fields can be requested: * allowableOperations * path * properties * isFavorite * aspectNames  (optional)
     - parameter fields: (query) A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter.  (optional)

     - returns: RequestBuilder<SharedLinkPaging> 
     */
    open class func listSharedLinksWithRequestBuilder(skipCount: Int? = nil, maxItems: Int? = nil, _where: String? = nil, include: [String]? = nil, fields: [String]? = nil) -> RequestBuilder<SharedLinkPaging> {
        let path = "/alfresco/versions/1/shared-links"
        let URLString = AlfrescoContentAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "skipCount": skipCount?.encodeToJSON(), 
            "maxItems": maxItems?.encodeToJSON(), 
            "where": _where, 
            "include": include, 
            "fields": fields
        ])

        let requestBuilder: RequestBuilder<SharedLinkPaging>.Type = AlfrescoContentAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
